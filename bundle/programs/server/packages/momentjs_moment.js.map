{"version":3,"sources":["meteor://ðŸ’»app/packages/momentjs_moment/packages/momentjs_moment.js"],"names":[],"mappingsfile":"/packages/momentjs_moment.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/moment.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//! moment.js                                                                                                          // 1\n//! version : 2.9.0                                                                                                    // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                         // 3\n//! license : MIT                                                                                                      // 4\n//! momentjs.com                                                                                                       // 5\n                                                                                                                       // 6\n(function (undefined) {                                                                                                // 7\n    /************************************                                                                              // 8\n        Constants                                                                                                      // 9\n    ************************************/                                                                              // 10\n                                                                                                                       // 11\n    var moment,                                                                                                        // 12\n        VERSION = '2.9.0',                                                                                             // 13\n        // the global-scope this is NOT the global object in Node.js                                                   // 14\n        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,\n        oldGlobalMoment,                                                                                               // 16\n        round = Math.round,                                                                                            // 17\n        hasOwnProperty = Object.prototype.hasOwnProperty,                                                              // 18\n        i,                                                                                                             // 19\n                                                                                                                       // 20\n        YEAR = 0,                                                                                                      // 21\n        MONTH = 1,                                                                                                     // 22\n        DATE = 2,                                                                                                      // 23\n        HOUR = 3,                                                                                                      // 24\n        MINUTE = 4,                                                                                                    // 25\n        SECOND = 5,                                                                                                    // 26\n        MILLISECOND = 6,                                                                                               // 27\n                                                                                                                       // 28\n        // internal storage for locale config files                                                                    // 29\n        locales = {},                                                                                                  // 30\n                                                                                                                       // 31\n        // extra moment internal properties (plugins register props here)                                              // 32\n        momentProperties = [],                                                                                         // 33\n                                                                                                                       // 34\n        // check for nodeJS                                                                                            // 35\n        hasModule = (typeof module !== 'undefined' && module && module.exports),                                       // 36\n                                                                                                                       // 37\n        // ASP.NET json date format regex                                                                              // 38\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,                                                                       // 39\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,                              // 40\n                                                                                                                       // 41\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                   // 42\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                   // 43\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n                                                                                                                       // 45\n        // format tokens                                                                                               // 46\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,                                          // 48\n                                                                                                                       // 49\n        // parsing token regexes                                                                                       // 50\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99                                                                  // 51\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999                                                             // 52\n        parseTokenOneToFourDigits = /\\d{1,4}/, // 0 - 9999                                                             // 53\n        parseTokenOneToSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999                                              // 54\n        parseTokenDigits = /\\d+/, // nonzero number of digits                                                          // 55\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z                                 // 57\n        parseTokenT = /T/i, // T (ISO separator)                                                                       // 58\n        parseTokenOffsetMs = /[\\+\\-]?\\d+/, // 1234567890123                                                            // 59\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123                                   // 60\n                                                                                                                       // 61\n        //strict parsing regexes                                                                                       // 62\n        parseTokenOneDigit = /\\d/, // 0 - 9                                                                            // 63\n        parseTokenTwoDigits = /\\d\\d/, // 00 - 99                                                                       // 64\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999                                                                  // 65\n        parseTokenFourDigits = /\\d{4}/, // 0000 - 9999                                                                 // 66\n        parseTokenSixDigits = /[+-]?\\d{6}/, // -999,999 - 999,999                                                      // 67\n        parseTokenSignedNumber = /[+-]?\\d+/, // -inf - inf                                                             // 68\n                                                                                                                       // 69\n        // iso 8601 regex                                                                                              // 70\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)   // 71\n        isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n                                                                                                                       // 73\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',                                                                            // 74\n                                                                                                                       // 75\n        isoDates = [                                                                                                   // 76\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],                                                                 // 77\n            ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],                                                                       // 78\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],                                                                       // 79\n            ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],                                                                            // 80\n            ['YYYY-DDD', /\\d{4}-\\d{3}/]                                                                                // 81\n        ],                                                                                                             // 82\n                                                                                                                       // 83\n        // iso time formats and regexes                                                                                // 84\n        isoTimes = [                                                                                                   // 85\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                             // 86\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],                                                                       // 87\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],                                                                               // 88\n            ['HH', /(T| )\\d\\d/]                                                                                        // 89\n        ],                                                                                                             // 90\n                                                                                                                       // 91\n        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']                                     // 92\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,                                                                      // 93\n                                                                                                                       // 94\n        // getter and setter names                                                                                     // 95\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),                                 // 96\n        unitMillisecondFactors = {                                                                                     // 97\n            'Milliseconds' : 1,                                                                                        // 98\n            'Seconds' : 1e3,                                                                                           // 99\n            'Minutes' : 6e4,                                                                                           // 100\n            'Hours' : 36e5,                                                                                            // 101\n            'Days' : 864e5,                                                                                            // 102\n            'Months' : 2592e6,                                                                                         // 103\n            'Years' : 31536e6                                                                                          // 104\n        },                                                                                                             // 105\n                                                                                                                       // 106\n        unitAliases = {                                                                                                // 107\n            ms : 'millisecond',                                                                                        // 108\n            s : 'second',                                                                                              // 109\n            m : 'minute',                                                                                              // 110\n            h : 'hour',                                                                                                // 111\n            d : 'day',                                                                                                 // 112\n            D : 'date',                                                                                                // 113\n            w : 'week',                                                                                                // 114\n            W : 'isoWeek',                                                                                             // 115\n            M : 'month',                                                                                               // 116\n            Q : 'quarter',                                                                                             // 117\n            y : 'year',                                                                                                // 118\n            DDD : 'dayOfYear',                                                                                         // 119\n            e : 'weekday',                                                                                             // 120\n            E : 'isoWeekday',                                                                                          // 121\n            gg: 'weekYear',                                                                                            // 122\n            GG: 'isoWeekYear'                                                                                          // 123\n        },                                                                                                             // 124\n                                                                                                                       // 125\n        camelFunctions = {                                                                                             // 126\n            dayofyear : 'dayOfYear',                                                                                   // 127\n            isoweekday : 'isoWeekday',                                                                                 // 128\n            isoweek : 'isoWeek',                                                                                       // 129\n            weekyear : 'weekYear',                                                                                     // 130\n            isoweekyear : 'isoWeekYear'                                                                                // 131\n        },                                                                                                             // 132\n                                                                                                                       // 133\n        // format function strings                                                                                     // 134\n        formatFunctions = {},                                                                                          // 135\n                                                                                                                       // 136\n        // default relative time thresholds                                                                            // 137\n        relativeTimeThresholds = {                                                                                     // 138\n            s: 45,  // seconds to minute                                                                               // 139\n            m: 45,  // minutes to hour                                                                                 // 140\n            h: 22,  // hours to day                                                                                    // 141\n            d: 26,  // days to month                                                                                   // 142\n            M: 11   // months to year                                                                                  // 143\n        },                                                                                                             // 144\n                                                                                                                       // 145\n        // tokens to ordinalize and pad                                                                                // 146\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),                                                                 // 147\n        paddedTokens = 'M D H h m s w W'.split(' '),                                                                   // 148\n                                                                                                                       // 149\n        formatTokenFunctions = {                                                                                       // 150\n            M    : function () {                                                                                       // 151\n                return this.month() + 1;                                                                               // 152\n            },                                                                                                         // 153\n            MMM  : function (format) {                                                                                 // 154\n                return this.localeData().monthsShort(this, format);                                                    // 155\n            },                                                                                                         // 156\n            MMMM : function (format) {                                                                                 // 157\n                return this.localeData().months(this, format);                                                         // 158\n            },                                                                                                         // 159\n            D    : function () {                                                                                       // 160\n                return this.date();                                                                                    // 161\n            },                                                                                                         // 162\n            DDD  : function () {                                                                                       // 163\n                return this.dayOfYear();                                                                               // 164\n            },                                                                                                         // 165\n            d    : function () {                                                                                       // 166\n                return this.day();                                                                                     // 167\n            },                                                                                                         // 168\n            dd   : function (format) {                                                                                 // 169\n                return this.localeData().weekdaysMin(this, format);                                                    // 170\n            },                                                                                                         // 171\n            ddd  : function (format) {                                                                                 // 172\n                return this.localeData().weekdaysShort(this, format);                                                  // 173\n            },                                                                                                         // 174\n            dddd : function (format) {                                                                                 // 175\n                return this.localeData().weekdays(this, format);                                                       // 176\n            },                                                                                                         // 177\n            w    : function () {                                                                                       // 178\n                return this.week();                                                                                    // 179\n            },                                                                                                         // 180\n            W    : function () {                                                                                       // 181\n                return this.isoWeek();                                                                                 // 182\n            },                                                                                                         // 183\n            YY   : function () {                                                                                       // 184\n                return leftZeroFill(this.year() % 100, 2);                                                             // 185\n            },                                                                                                         // 186\n            YYYY : function () {                                                                                       // 187\n                return leftZeroFill(this.year(), 4);                                                                   // 188\n            },                                                                                                         // 189\n            YYYYY : function () {                                                                                      // 190\n                return leftZeroFill(this.year(), 5);                                                                   // 191\n            },                                                                                                         // 192\n            YYYYYY : function () {                                                                                     // 193\n                var y = this.year(), sign = y >= 0 ? '+' : '-';                                                        // 194\n                return sign + leftZeroFill(Math.abs(y), 6);                                                            // 195\n            },                                                                                                         // 196\n            gg   : function () {                                                                                       // 197\n                return leftZeroFill(this.weekYear() % 100, 2);                                                         // 198\n            },                                                                                                         // 199\n            gggg : function () {                                                                                       // 200\n                return leftZeroFill(this.weekYear(), 4);                                                               // 201\n            },                                                                                                         // 202\n            ggggg : function () {                                                                                      // 203\n                return leftZeroFill(this.weekYear(), 5);                                                               // 204\n            },                                                                                                         // 205\n            GG   : function () {                                                                                       // 206\n                return leftZeroFill(this.isoWeekYear() % 100, 2);                                                      // 207\n            },                                                                                                         // 208\n            GGGG : function () {                                                                                       // 209\n                return leftZeroFill(this.isoWeekYear(), 4);                                                            // 210\n            },                                                                                                         // 211\n            GGGGG : function () {                                                                                      // 212\n                return leftZeroFill(this.isoWeekYear(), 5);                                                            // 213\n            },                                                                                                         // 214\n            e : function () {                                                                                          // 215\n                return this.weekday();                                                                                 // 216\n            },                                                                                                         // 217\n            E : function () {                                                                                          // 218\n                return this.isoWeekday();                                                                              // 219\n            },                                                                                                         // 220\n            a    : function () {                                                                                       // 221\n                return this.localeData().meridiem(this.hours(), this.minutes(), true);                                 // 222\n            },                                                                                                         // 223\n            A    : function () {                                                                                       // 224\n                return this.localeData().meridiem(this.hours(), this.minutes(), false);                                // 225\n            },                                                                                                         // 226\n            H    : function () {                                                                                       // 227\n                return this.hours();                                                                                   // 228\n            },                                                                                                         // 229\n            h    : function () {                                                                                       // 230\n                return this.hours() % 12 || 12;                                                                        // 231\n            },                                                                                                         // 232\n            m    : function () {                                                                                       // 233\n                return this.minutes();                                                                                 // 234\n            },                                                                                                         // 235\n            s    : function () {                                                                                       // 236\n                return this.seconds();                                                                                 // 237\n            },                                                                                                         // 238\n            S    : function () {                                                                                       // 239\n                return toInt(this.milliseconds() / 100);                                                               // 240\n            },                                                                                                         // 241\n            SS   : function () {                                                                                       // 242\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);                                               // 243\n            },                                                                                                         // 244\n            SSS  : function () {                                                                                       // 245\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 246\n            },                                                                                                         // 247\n            SSSS : function () {                                                                                       // 248\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 249\n            },                                                                                                         // 250\n            Z    : function () {                                                                                       // 251\n                var a = this.utcOffset(),                                                                              // 252\n                    b = '+';                                                                                           // 253\n                if (a < 0) {                                                                                           // 254\n                    a = -a;                                                                                            // 255\n                    b = '-';                                                                                           // 256\n                }                                                                                                      // 257\n                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);                      // 258\n            },                                                                                                         // 259\n            ZZ   : function () {                                                                                       // 260\n                var a = this.utcOffset(),                                                                              // 261\n                    b = '+';                                                                                           // 262\n                if (a < 0) {                                                                                           // 263\n                    a = -a;                                                                                            // 264\n                    b = '-';                                                                                           // 265\n                }                                                                                                      // 266\n                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);                            // 267\n            },                                                                                                         // 268\n            z : function () {                                                                                          // 269\n                return this.zoneAbbr();                                                                                // 270\n            },                                                                                                         // 271\n            zz : function () {                                                                                         // 272\n                return this.zoneName();                                                                                // 273\n            },                                                                                                         // 274\n            x    : function () {                                                                                       // 275\n                return this.valueOf();                                                                                 // 276\n            },                                                                                                         // 277\n            X    : function () {                                                                                       // 278\n                return this.unix();                                                                                    // 279\n            },                                                                                                         // 280\n            Q : function () {                                                                                          // 281\n                return this.quarter();                                                                                 // 282\n            }                                                                                                          // 283\n        },                                                                                                             // 284\n                                                                                                                       // 285\n        deprecations = {},                                                                                             // 286\n                                                                                                                       // 287\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],                                 // 288\n                                                                                                                       // 289\n        updateInProgress = false;                                                                                      // 290\n                                                                                                                       // 291\n    // Pick the first defined of two or three arguments. dfl comes from                                                // 292\n    // default.                                                                                                        // 293\n    function dfl(a, b, c) {                                                                                            // 294\n        switch (arguments.length) {                                                                                    // 295\n            case 2: return a != null ? a : b;                                                                          // 296\n            case 3: return a != null ? a : b != null ? b : c;                                                          // 297\n            default: throw new Error('Implement me');                                                                  // 298\n        }                                                                                                              // 299\n    }                                                                                                                  // 300\n                                                                                                                       // 301\n    function hasOwnProp(a, b) {                                                                                        // 302\n        return hasOwnProperty.call(a, b);                                                                              // 303\n    }                                                                                                                  // 304\n                                                                                                                       // 305\n    function defaultParsingFlags() {                                                                                   // 306\n        // We need to deep clone this object, and es5 standard is not very                                             // 307\n        // helpful.                                                                                                    // 308\n        return {                                                                                                       // 309\n            empty : false,                                                                                             // 310\n            unusedTokens : [],                                                                                         // 311\n            unusedInput : [],                                                                                          // 312\n            overflow : -2,                                                                                             // 313\n            charsLeftOver : 0,                                                                                         // 314\n            nullInput : false,                                                                                         // 315\n            invalidMonth : null,                                                                                       // 316\n            invalidFormat : false,                                                                                     // 317\n            userInvalidated : false,                                                                                   // 318\n            iso: false                                                                                                 // 319\n        };                                                                                                             // 320\n    }                                                                                                                  // 321\n                                                                                                                       // 322\n    function printMsg(msg) {                                                                                           // 323\n        if (moment.suppressDeprecationWarnings === false &&                                                            // 324\n                typeof console !== 'undefined' && console.warn) {                                                      // 325\n            console.warn('Deprecation warning: ' + msg);                                                               // 326\n        }                                                                                                              // 327\n    }                                                                                                                  // 328\n                                                                                                                       // 329\n    function deprecate(msg, fn) {                                                                                      // 330\n        var firstTime = true;                                                                                          // 331\n        return extend(function () {                                                                                    // 332\n            if (firstTime) {                                                                                           // 333\n                printMsg(msg);                                                                                         // 334\n                firstTime = false;                                                                                     // 335\n            }                                                                                                          // 336\n            return fn.apply(this, arguments);                                                                          // 337\n        }, fn);                                                                                                        // 338\n    }                                                                                                                  // 339\n                                                                                                                       // 340\n    function deprecateSimple(name, msg) {                                                                              // 341\n        if (!deprecations[name]) {                                                                                     // 342\n            printMsg(msg);                                                                                             // 343\n            deprecations[name] = true;                                                                                 // 344\n        }                                                                                                              // 345\n    }                                                                                                                  // 346\n                                                                                                                       // 347\n    function padToken(func, count) {                                                                                   // 348\n        return function (a) {                                                                                          // 349\n            return leftZeroFill(func.call(this, a), count);                                                            // 350\n        };                                                                                                             // 351\n    }                                                                                                                  // 352\n    function ordinalizeToken(func, period) {                                                                           // 353\n        return function (a) {                                                                                          // 354\n            return this.localeData().ordinal(func.call(this, a), period);                                              // 355\n        };                                                                                                             // 356\n    }                                                                                                                  // 357\n                                                                                                                       // 358\n    function monthDiff(a, b) {                                                                                         // 359\n        // difference in months                                                                                        // 360\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                   // 361\n            // b is in (anchor - 1 month, anchor + 1 month)                                                            // 362\n            anchor = a.clone().add(wholeMonthDiff, 'months'),                                                          // 363\n            anchor2, adjust;                                                                                           // 364\n                                                                                                                       // 365\n        if (b - anchor < 0) {                                                                                          // 366\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                     // 367\n            // linear across the month                                                                                 // 368\n            adjust = (b - anchor) / (anchor - anchor2);                                                                // 369\n        } else {                                                                                                       // 370\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                     // 371\n            // linear across the month                                                                                 // 372\n            adjust = (b - anchor) / (anchor2 - anchor);                                                                // 373\n        }                                                                                                              // 374\n                                                                                                                       // 375\n        return -(wholeMonthDiff + adjust);                                                                             // 376\n    }                                                                                                                  // 377\n                                                                                                                       // 378\n    while (ordinalizeTokens.length) {                                                                                  // 379\n        i = ordinalizeTokens.pop();                                                                                    // 380\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);                                   // 381\n    }                                                                                                                  // 382\n    while (paddedTokens.length) {                                                                                      // 383\n        i = paddedTokens.pop();                                                                                        // 384\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);                                            // 385\n    }                                                                                                                  // 386\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);                                                 // 387\n                                                                                                                       // 388\n                                                                                                                       // 389\n    function meridiemFixWrap(locale, hour, meridiem) {                                                                 // 390\n        var isPm;                                                                                                      // 391\n                                                                                                                       // 392\n        if (meridiem == null) {                                                                                        // 393\n            // nothing to do                                                                                           // 394\n            return hour;                                                                                               // 395\n        }                                                                                                              // 396\n        if (locale.meridiemHour != null) {                                                                             // 397\n            return locale.meridiemHour(hour, meridiem);                                                                // 398\n        } else if (locale.isPM != null) {                                                                              // 399\n            // Fallback                                                                                                // 400\n            isPm = locale.isPM(meridiem);                                                                              // 401\n            if (isPm && hour < 12) {                                                                                   // 402\n                hour += 12;                                                                                            // 403\n            }                                                                                                          // 404\n            if (!isPm && hour === 12) {                                                                                // 405\n                hour = 0;                                                                                              // 406\n            }                                                                                                          // 407\n            return hour;                                                                                               // 408\n        } else {                                                                                                       // 409\n            // thie is not supposed to happen                                                                          // 410\n            return hour;                                                                                               // 411\n        }                                                                                                              // 412\n    }                                                                                                                  // 413\n                                                                                                                       // 414\n    /************************************                                                                              // 415\n        Constructors                                                                                                   // 416\n    ************************************/                                                                              // 417\n                                                                                                                       // 418\n    function Locale() {                                                                                                // 419\n    }                                                                                                                  // 420\n                                                                                                                       // 421\n    // Moment prototype object                                                                                         // 422\n    function Moment(config, skipOverflow) {                                                                            // 423\n        if (skipOverflow !== false) {                                                                                  // 424\n            checkOverflow(config);                                                                                     // 425\n        }                                                                                                              // 426\n        copyConfig(this, config);                                                                                      // 427\n        this._d = new Date(+config._d);                                                                                // 428\n        // Prevent infinite loop in case updateOffset creates new moment                                               // 429\n        // objects.                                                                                                    // 430\n        if (updateInProgress === false) {                                                                              // 431\n            updateInProgress = true;                                                                                   // 432\n            moment.updateOffset(this);                                                                                 // 433\n            updateInProgress = false;                                                                                  // 434\n        }                                                                                                              // 435\n    }                                                                                                                  // 436\n                                                                                                                       // 437\n    // Duration Constructor                                                                                            // 438\n    function Duration(duration) {                                                                                      // 439\n        var normalizedInput = normalizeObjectUnits(duration),                                                          // 440\n            years = normalizedInput.year || 0,                                                                         // 441\n            quarters = normalizedInput.quarter || 0,                                                                   // 442\n            months = normalizedInput.month || 0,                                                                       // 443\n            weeks = normalizedInput.week || 0,                                                                         // 444\n            days = normalizedInput.day || 0,                                                                           // 445\n            hours = normalizedInput.hour || 0,                                                                         // 446\n            minutes = normalizedInput.minute || 0,                                                                     // 447\n            seconds = normalizedInput.second || 0,                                                                     // 448\n            milliseconds = normalizedInput.millisecond || 0;                                                           // 449\n                                                                                                                       // 450\n        // representation for dateAddRemove                                                                            // 451\n        this._milliseconds = +milliseconds +                                                                           // 452\n            seconds * 1e3 + // 1000                                                                                    // 453\n            minutes * 6e4 + // 1000 * 60                                                                               // 454\n            hours * 36e5; // 1000 * 60 * 60                                                                            // 455\n        // Because of dateAddRemove treats 24 hours as different from a                                                // 456\n        // day when working around DST, we need to store them separately                                               // 457\n        this._days = +days +                                                                                           // 458\n            weeks * 7;                                                                                                 // 459\n        // It is impossible translate months into days without knowing                                                 // 460\n        // which months you are are talking about, so we have to store                                                 // 461\n        // it separately.                                                                                              // 462\n        this._months = +months +                                                                                       // 463\n            quarters * 3 +                                                                                             // 464\n            years * 12;                                                                                                // 465\n                                                                                                                       // 466\n        this._data = {};                                                                                               // 467\n                                                                                                                       // 468\n        this._locale = moment.localeData();                                                                            // 469\n                                                                                                                       // 470\n        this._bubble();                                                                                                // 471\n    }                                                                                                                  // 472\n                                                                                                                       // 473\n    /************************************                                                                              // 474\n        Helpers                                                                                                        // 475\n    ************************************/                                                                              // 476\n                                                                                                                       // 477\n                                                                                                                       // 478\n    function extend(a, b) {                                                                                            // 479\n        for (var i in b) {                                                                                             // 480\n            if (hasOwnProp(b, i)) {                                                                                    // 481\n                a[i] = b[i];                                                                                           // 482\n            }                                                                                                          // 483\n        }                                                                                                              // 484\n                                                                                                                       // 485\n        if (hasOwnProp(b, 'toString')) {                                                                               // 486\n            a.toString = b.toString;                                                                                   // 487\n        }                                                                                                              // 488\n                                                                                                                       // 489\n        if (hasOwnProp(b, 'valueOf')) {                                                                                // 490\n            a.valueOf = b.valueOf;                                                                                     // 491\n        }                                                                                                              // 492\n                                                                                                                       // 493\n        return a;                                                                                                      // 494\n    }                                                                                                                  // 495\n                                                                                                                       // 496\n    function copyConfig(to, from) {                                                                                    // 497\n        var i, prop, val;                                                                                              // 498\n                                                                                                                       // 499\n        if (typeof from._isAMomentObject !== 'undefined') {                                                            // 500\n            to._isAMomentObject = from._isAMomentObject;                                                               // 501\n        }                                                                                                              // 502\n        if (typeof from._i !== 'undefined') {                                                                          // 503\n            to._i = from._i;                                                                                           // 504\n        }                                                                                                              // 505\n        if (typeof from._f !== 'undefined') {                                                                          // 506\n            to._f = from._f;                                                                                           // 507\n        }                                                                                                              // 508\n        if (typeof from._l !== 'undefined') {                                                                          // 509\n            to._l = from._l;                                                                                           // 510\n        }                                                                                                              // 511\n        if (typeof from._strict !== 'undefined') {                                                                     // 512\n            to._strict = from._strict;                                                                                 // 513\n        }                                                                                                              // 514\n        if (typeof from._tzm !== 'undefined') {                                                                        // 515\n            to._tzm = from._tzm;                                                                                       // 516\n        }                                                                                                              // 517\n        if (typeof from._isUTC !== 'undefined') {                                                                      // 518\n            to._isUTC = from._isUTC;                                                                                   // 519\n        }                                                                                                              // 520\n        if (typeof from._offset !== 'undefined') {                                                                     // 521\n            to._offset = from._offset;                                                                                 // 522\n        }                                                                                                              // 523\n        if (typeof from._pf !== 'undefined') {                                                                         // 524\n            to._pf = from._pf;                                                                                         // 525\n        }                                                                                                              // 526\n        if (typeof from._locale !== 'undefined') {                                                                     // 527\n            to._locale = from._locale;                                                                                 // 528\n        }                                                                                                              // 529\n                                                                                                                       // 530\n        if (momentProperties.length > 0) {                                                                             // 531\n            for (i in momentProperties) {                                                                              // 532\n                prop = momentProperties[i];                                                                            // 533\n                val = from[prop];                                                                                      // 534\n                if (typeof val !== 'undefined') {                                                                      // 535\n                    to[prop] = val;                                                                                    // 536\n                }                                                                                                      // 537\n            }                                                                                                          // 538\n        }                                                                                                              // 539\n                                                                                                                       // 540\n        return to;                                                                                                     // 541\n    }                                                                                                                  // 542\n                                                                                                                       // 543\n    function absRound(number) {                                                                                        // 544\n        if (number < 0) {                                                                                              // 545\n            return Math.ceil(number);                                                                                  // 546\n        } else {                                                                                                       // 547\n            return Math.floor(number);                                                                                 // 548\n        }                                                                                                              // 549\n    }                                                                                                                  // 550\n                                                                                                                       // 551\n    // left zero fill a number                                                                                         // 552\n    // see http://jsperf.com/left-zero-filling for performance comparison                                              // 553\n    function leftZeroFill(number, targetLength, forceSign) {                                                           // 554\n        var output = '' + Math.abs(number),                                                                            // 555\n            sign = number >= 0;                                                                                        // 556\n                                                                                                                       // 557\n        while (output.length < targetLength) {                                                                         // 558\n            output = '0' + output;                                                                                     // 559\n        }                                                                                                              // 560\n        return (sign ? (forceSign ? '+' : '') : '-') + output;                                                         // 561\n    }                                                                                                                  // 562\n                                                                                                                       // 563\n    function positiveMomentsDifference(base, other) {                                                                  // 564\n        var res = {milliseconds: 0, months: 0};                                                                        // 565\n                                                                                                                       // 566\n        res.months = other.month() - base.month() +                                                                    // 567\n            (other.year() - base.year()) * 12;                                                                         // 568\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 569\n            --res.months;                                                                                              // 570\n        }                                                                                                              // 571\n                                                                                                                       // 572\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 573\n                                                                                                                       // 574\n        return res;                                                                                                    // 575\n    }                                                                                                                  // 576\n                                                                                                                       // 577\n    function momentsDifference(base, other) {                                                                          // 578\n        var res;                                                                                                       // 579\n        other = makeAs(other, base);                                                                                   // 580\n        if (base.isBefore(other)) {                                                                                    // 581\n            res = positiveMomentsDifference(base, other);                                                              // 582\n        } else {                                                                                                       // 583\n            res = positiveMomentsDifference(other, base);                                                              // 584\n            res.milliseconds = -res.milliseconds;                                                                      // 585\n            res.months = -res.months;                                                                                  // 586\n        }                                                                                                              // 587\n                                                                                                                       // 588\n        return res;                                                                                                    // 589\n    }                                                                                                                  // 590\n                                                                                                                       // 591\n    // TODO: remove 'name' arg after deprecation is removed                                                            // 592\n    function createAdder(direction, name) {                                                                            // 593\n        return function (val, period) {                                                                                // 594\n            var dur, tmp;                                                                                              // 595\n            //invert the arguments, but complain about it                                                              // 596\n            if (period !== null && !isNaN(+period)) {                                                                  // 597\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\n                tmp = val; val = period; period = tmp;                                                                 // 599\n            }                                                                                                          // 600\n                                                                                                                       // 601\n            val = typeof val === 'string' ? +val : val;                                                                // 602\n            dur = moment.duration(val, period);                                                                        // 603\n            addOrSubtractDurationFromMoment(this, dur, direction);                                                     // 604\n            return this;                                                                                               // 605\n        };                                                                                                             // 606\n    }                                                                                                                  // 607\n                                                                                                                       // 608\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {                                  // 609\n        var milliseconds = duration._milliseconds,                                                                     // 610\n            days = duration._days,                                                                                     // 611\n            months = duration._months;                                                                                 // 612\n        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 613\n                                                                                                                       // 614\n        if (milliseconds) {                                                                                            // 615\n            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                         // 616\n        }                                                                                                              // 617\n        if (days) {                                                                                                    // 618\n            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);                                          // 619\n        }                                                                                                              // 620\n        if (months) {                                                                                                  // 621\n            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);                                          // 622\n        }                                                                                                              // 623\n        if (updateOffset) {                                                                                            // 624\n            moment.updateOffset(mom, days || months);                                                                  // 625\n        }                                                                                                              // 626\n    }                                                                                                                  // 627\n                                                                                                                       // 628\n    // check if is an array                                                                                            // 629\n    function isArray(input) {                                                                                          // 630\n        return Object.prototype.toString.call(input) === '[object Array]';                                             // 631\n    }                                                                                                                  // 632\n                                                                                                                       // 633\n    function isDate(input) {                                                                                           // 634\n        return Object.prototype.toString.call(input) === '[object Date]' ||                                            // 635\n            input instanceof Date;                                                                                     // 636\n    }                                                                                                                  // 637\n                                                                                                                       // 638\n    // compare two arrays, return the number of differences                                                            // 639\n    function compareArrays(array1, array2, dontConvert) {                                                              // 640\n        var len = Math.min(array1.length, array2.length),                                                              // 641\n            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 642\n            diffs = 0,                                                                                                 // 643\n            i;                                                                                                         // 644\n        for (i = 0; i < len; i++) {                                                                                    // 645\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 646\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 647\n                diffs++;                                                                                               // 648\n            }                                                                                                          // 649\n        }                                                                                                              // 650\n        return diffs + lengthDiff;                                                                                     // 651\n    }                                                                                                                  // 652\n                                                                                                                       // 653\n    function normalizeUnits(units) {                                                                                   // 654\n        if (units) {                                                                                                   // 655\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');                                                  // 656\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;                                          // 657\n        }                                                                                                              // 658\n        return units;                                                                                                  // 659\n    }                                                                                                                  // 660\n                                                                                                                       // 661\n    function normalizeObjectUnits(inputObject) {                                                                       // 662\n        var normalizedInput = {},                                                                                      // 663\n            normalizedProp,                                                                                            // 664\n            prop;                                                                                                      // 665\n                                                                                                                       // 666\n        for (prop in inputObject) {                                                                                    // 667\n            if (hasOwnProp(inputObject, prop)) {                                                                       // 668\n                normalizedProp = normalizeUnits(prop);                                                                 // 669\n                if (normalizedProp) {                                                                                  // 670\n                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 671\n                }                                                                                                      // 672\n            }                                                                                                          // 673\n        }                                                                                                              // 674\n                                                                                                                       // 675\n        return normalizedInput;                                                                                        // 676\n    }                                                                                                                  // 677\n                                                                                                                       // 678\n    function makeList(field) {                                                                                         // 679\n        var count, setter;                                                                                             // 680\n                                                                                                                       // 681\n        if (field.indexOf('week') === 0) {                                                                             // 682\n            count = 7;                                                                                                 // 683\n            setter = 'day';                                                                                            // 684\n        }                                                                                                              // 685\n        else if (field.indexOf('month') === 0) {                                                                       // 686\n            count = 12;                                                                                                // 687\n            setter = 'month';                                                                                          // 688\n        }                                                                                                              // 689\n        else {                                                                                                         // 690\n            return;                                                                                                    // 691\n        }                                                                                                              // 692\n                                                                                                                       // 693\n        moment[field] = function (format, index) {                                                                     // 694\n            var i, getter,                                                                                             // 695\n                method = moment._locale[field],                                                                        // 696\n                results = [];                                                                                          // 697\n                                                                                                                       // 698\n            if (typeof format === 'number') {                                                                          // 699\n                index = format;                                                                                        // 700\n                format = undefined;                                                                                    // 701\n            }                                                                                                          // 702\n                                                                                                                       // 703\n            getter = function (i) {                                                                                    // 704\n                var m = moment().utc().set(setter, i);                                                                 // 705\n                return method.call(moment._locale, m, format || '');                                                   // 706\n            };                                                                                                         // 707\n                                                                                                                       // 708\n            if (index != null) {                                                                                       // 709\n                return getter(index);                                                                                  // 710\n            }                                                                                                          // 711\n            else {                                                                                                     // 712\n                for (i = 0; i < count; i++) {                                                                          // 713\n                    results.push(getter(i));                                                                           // 714\n                }                                                                                                      // 715\n                return results;                                                                                        // 716\n            }                                                                                                          // 717\n        };                                                                                                             // 718\n    }                                                                                                                  // 719\n                                                                                                                       // 720\n    function toInt(argumentForCoercion) {                                                                              // 721\n        var coercedNumber = +argumentForCoercion,                                                                      // 722\n            value = 0;                                                                                                 // 723\n                                                                                                                       // 724\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 725\n            if (coercedNumber >= 0) {                                                                                  // 726\n                value = Math.floor(coercedNumber);                                                                     // 727\n            } else {                                                                                                   // 728\n                value = Math.ceil(coercedNumber);                                                                      // 729\n            }                                                                                                          // 730\n        }                                                                                                              // 731\n                                                                                                                       // 732\n        return value;                                                                                                  // 733\n    }                                                                                                                  // 734\n                                                                                                                       // 735\n    function daysInMonth(year, month) {                                                                                // 736\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 737\n    }                                                                                                                  // 738\n                                                                                                                       // 739\n    function weeksInYear(year, dow, doy) {                                                                             // 740\n        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;                                          // 741\n    }                                                                                                                  // 742\n                                                                                                                       // 743\n    function daysInYear(year) {                                                                                        // 744\n        return isLeapYear(year) ? 366 : 365;                                                                           // 745\n    }                                                                                                                  // 746\n                                                                                                                       // 747\n    function isLeapYear(year) {                                                                                        // 748\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 749\n    }                                                                                                                  // 750\n                                                                                                                       // 751\n    function checkOverflow(m) {                                                                                        // 752\n        var overflow;                                                                                                  // 753\n        if (m._a && m._pf.overflow === -2) {                                                                           // 754\n            overflow =                                                                                                 // 755\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :                                                          // 756\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :                           // 757\n                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||                                                                   // 758\n                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||                                                       // 759\n                                           m._a[SECOND] !== 0 ||                                                       // 760\n                                           m._a[MILLISECOND] !== 0)) ? HOUR :                                          // 761\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :                                                       // 762\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :                                                       // 763\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :                                       // 764\n                -1;                                                                                                    // 765\n                                                                                                                       // 766\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                                    // 767\n                overflow = DATE;                                                                                       // 768\n            }                                                                                                          // 769\n                                                                                                                       // 770\n            m._pf.overflow = overflow;                                                                                 // 771\n        }                                                                                                              // 772\n    }                                                                                                                  // 773\n                                                                                                                       // 774\n    function isValid(m) {                                                                                              // 775\n        if (m._isValid == null) {                                                                                      // 776\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 777\n                m._pf.overflow < 0 &&                                                                                  // 778\n                !m._pf.empty &&                                                                                        // 779\n                !m._pf.invalidMonth &&                                                                                 // 780\n                !m._pf.nullInput &&                                                                                    // 781\n                !m._pf.invalidFormat &&                                                                                // 782\n                !m._pf.userInvalidated;                                                                                // 783\n                                                                                                                       // 784\n            if (m._strict) {                                                                                           // 785\n                m._isValid = m._isValid &&                                                                             // 786\n                    m._pf.charsLeftOver === 0 &&                                                                       // 787\n                    m._pf.unusedTokens.length === 0 &&                                                                 // 788\n                    m._pf.bigHour === undefined;                                                                       // 789\n            }                                                                                                          // 790\n        }                                                                                                              // 791\n        return m._isValid;                                                                                             // 792\n    }                                                                                                                  // 793\n                                                                                                                       // 794\n    function normalizeLocale(key) {                                                                                    // 795\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 796\n    }                                                                                                                  // 797\n                                                                                                                       // 798\n    // pick the locale from the array                                                                                  // 799\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 800\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                     // 802\n        var i = 0, j, next, locale, split;                                                                             // 803\n                                                                                                                       // 804\n        while (i < names.length) {                                                                                     // 805\n            split = normalizeLocale(names[i]).split('-');                                                              // 806\n            j = split.length;                                                                                          // 807\n            next = normalizeLocale(names[i + 1]);                                                                      // 808\n            next = next ? next.split('-') : null;                                                                      // 809\n            while (j > 0) {                                                                                            // 810\n                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 811\n                if (locale) {                                                                                          // 812\n                    return locale;                                                                                     // 813\n                }                                                                                                      // 814\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 815\n                    //the next array item is better than a shallower substring of this one                             // 816\n                    break;                                                                                             // 817\n                }                                                                                                      // 818\n                j--;                                                                                                   // 819\n            }                                                                                                          // 820\n            i++;                                                                                                       // 821\n        }                                                                                                              // 822\n        return null;                                                                                                   // 823\n    }                                                                                                                  // 824\n                                                                                                                       // 825\n    function loadLocale(name) {                                                                                        // 826\n        var oldLocale = null;                                                                                          // 827\n        if (!locales[name] && hasModule) {                                                                             // 828\n            try {                                                                                                      // 829\n                oldLocale = moment.locale();                                                                           // 830\n                require('./locale/' + name);                                                                           // 831\n                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales\n                moment.locale(oldLocale);                                                                              // 833\n            } catch (e) { }                                                                                            // 834\n        }                                                                                                              // 835\n        return locales[name];                                                                                          // 836\n    }                                                                                                                  // 837\n                                                                                                                       // 838\n    // Return a moment from input, that is local/utc/utcOffset equivalent to                                           // 839\n    // model.                                                                                                          // 840\n    function makeAs(input, model) {                                                                                    // 841\n        var res, diff;                                                                                                 // 842\n        if (model._isUTC) {                                                                                            // 843\n            res = model.clone();                                                                                       // 844\n            diff = (moment.isMoment(input) || isDate(input) ?                                                          // 845\n                    +input : +moment(input)) - (+res);                                                                 // 846\n            // Use low-level api, because this fn is low-level api.                                                    // 847\n            res._d.setTime(+res._d + diff);                                                                            // 848\n            moment.updateOffset(res, false);                                                                           // 849\n            return res;                                                                                                // 850\n        } else {                                                                                                       // 851\n            return moment(input).local();                                                                              // 852\n        }                                                                                                              // 853\n    }                                                                                                                  // 854\n                                                                                                                       // 855\n    /************************************                                                                              // 856\n        Locale                                                                                                         // 857\n    ************************************/                                                                              // 858\n                                                                                                                       // 859\n                                                                                                                       // 860\n    extend(Locale.prototype, {                                                                                         // 861\n                                                                                                                       // 862\n        set : function (config) {                                                                                      // 863\n            var prop, i;                                                                                               // 864\n            for (i in config) {                                                                                        // 865\n                prop = config[i];                                                                                      // 866\n                if (typeof prop === 'function') {                                                                      // 867\n                    this[i] = prop;                                                                                    // 868\n                } else {                                                                                               // 869\n                    this['_' + i] = prop;                                                                              // 870\n                }                                                                                                      // 871\n            }                                                                                                          // 872\n            // Lenient ordinal parsing accepts just a number in addition to                                            // 873\n            // number + (possibly) stuff coming from _ordinalParseLenient.                                             // 874\n            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\\d{1,2}/.source);                // 875\n        },                                                                                                             // 876\n                                                                                                                       // 877\n        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),  // 878\n        months : function (m) {                                                                                        // 879\n            return this._months[m.month()];                                                                            // 880\n        },                                                                                                             // 881\n                                                                                                                       // 882\n        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                   // 883\n        monthsShort : function (m) {                                                                                   // 884\n            return this._monthsShort[m.month()];                                                                       // 885\n        },                                                                                                             // 886\n                                                                                                                       // 887\n        monthsParse : function (monthName, format, strict) {                                                           // 888\n            var i, mom, regex;                                                                                         // 889\n                                                                                                                       // 890\n            if (!this._monthsParse) {                                                                                  // 891\n                this._monthsParse = [];                                                                                // 892\n                this._longMonthsParse = [];                                                                            // 893\n                this._shortMonthsParse = [];                                                                           // 894\n            }                                                                                                          // 895\n                                                                                                                       // 896\n            for (i = 0; i < 12; i++) {                                                                                 // 897\n                // make the regex if we don't have it already                                                          // 898\n                mom = moment.utc([2000, i]);                                                                           // 899\n                if (strict && !this._longMonthsParse[i]) {                                                             // 900\n                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');     // 901\n                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n                }                                                                                                      // 903\n                if (!strict && !this._monthsParse[i]) {                                                                // 904\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                             // 905\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                    // 906\n                }                                                                                                      // 907\n                // test the regex                                                                                      // 908\n                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                         // 909\n                    return i;                                                                                          // 910\n                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                  // 911\n                    return i;                                                                                          // 912\n                } else if (!strict && this._monthsParse[i].test(monthName)) {                                          // 913\n                    return i;                                                                                          // 914\n                }                                                                                                      // 915\n            }                                                                                                          // 916\n        },                                                                                                             // 917\n                                                                                                                       // 918\n        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                             // 919\n        weekdays : function (m) {                                                                                      // 920\n            return this._weekdays[m.day()];                                                                            // 921\n        },                                                                                                             // 922\n                                                                                                                       // 923\n        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                     // 924\n        weekdaysShort : function (m) {                                                                                 // 925\n            return this._weekdaysShort[m.day()];                                                                       // 926\n        },                                                                                                             // 927\n                                                                                                                       // 928\n        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                              // 929\n        weekdaysMin : function (m) {                                                                                   // 930\n            return this._weekdaysMin[m.day()];                                                                         // 931\n        },                                                                                                             // 932\n                                                                                                                       // 933\n        weekdaysParse : function (weekdayName) {                                                                       // 934\n            var i, mom, regex;                                                                                         // 935\n                                                                                                                       // 936\n            if (!this._weekdaysParse) {                                                                                // 937\n                this._weekdaysParse = [];                                                                              // 938\n            }                                                                                                          // 939\n                                                                                                                       // 940\n            for (i = 0; i < 7; i++) {                                                                                  // 941\n                // make the regex if we don't have it already                                                          // 942\n                if (!this._weekdaysParse[i]) {                                                                         // 943\n                    mom = moment([2000, 1]).day(i);                                                                    // 944\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                  // 946\n                }                                                                                                      // 947\n                // test the regex                                                                                      // 948\n                if (this._weekdaysParse[i].test(weekdayName)) {                                                        // 949\n                    return i;                                                                                          // 950\n                }                                                                                                      // 951\n            }                                                                                                          // 952\n        },                                                                                                             // 953\n                                                                                                                       // 954\n        _longDateFormat : {                                                                                            // 955\n            LTS : 'h:mm:ss A',                                                                                         // 956\n            LT : 'h:mm A',                                                                                             // 957\n            L : 'MM/DD/YYYY',                                                                                          // 958\n            LL : 'MMMM D, YYYY',                                                                                       // 959\n            LLL : 'MMMM D, YYYY LT',                                                                                   // 960\n            LLLL : 'dddd, MMMM D, YYYY LT'                                                                             // 961\n        },                                                                                                             // 962\n        longDateFormat : function (key) {                                                                              // 963\n            var output = this._longDateFormat[key];                                                                    // 964\n            if (!output && this._longDateFormat[key.toUpperCase()]) {                                                  // 965\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {          // 966\n                    return val.slice(1);                                                                               // 967\n                });                                                                                                    // 968\n                this._longDateFormat[key] = output;                                                                    // 969\n            }                                                                                                          // 970\n            return output;                                                                                             // 971\n        },                                                                                                             // 972\n                                                                                                                       // 973\n        isPM : function (input) {                                                                                      // 974\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                         // 975\n            // Using charAt should be more compatible.                                                                 // 976\n            return ((input + '').toLowerCase().charAt(0) === 'p');                                                     // 977\n        },                                                                                                             // 978\n                                                                                                                       // 979\n        _meridiemParse : /[ap]\\.?m?\\.?/i,                                                                              // 980\n        meridiem : function (hours, minutes, isLower) {                                                                // 981\n            if (hours > 11) {                                                                                          // 982\n                return isLower ? 'pm' : 'PM';                                                                          // 983\n            } else {                                                                                                   // 984\n                return isLower ? 'am' : 'AM';                                                                          // 985\n            }                                                                                                          // 986\n        },                                                                                                             // 987\n                                                                                                                       // 988\n                                                                                                                       // 989\n        _calendar : {                                                                                                  // 990\n            sameDay : '[Today at] LT',                                                                                 // 991\n            nextDay : '[Tomorrow at] LT',                                                                              // 992\n            nextWeek : 'dddd [at] LT',                                                                                 // 993\n            lastDay : '[Yesterday at] LT',                                                                             // 994\n            lastWeek : '[Last] dddd [at] LT',                                                                          // 995\n            sameElse : 'L'                                                                                             // 996\n        },                                                                                                             // 997\n        calendar : function (key, mom, now) {                                                                          // 998\n            var output = this._calendar[key];                                                                          // 999\n            return typeof output === 'function' ? output.apply(mom, [now]) : output;                                   // 1000\n        },                                                                                                             // 1001\n                                                                                                                       // 1002\n        _relativeTime : {                                                                                              // 1003\n            future : 'in %s',                                                                                          // 1004\n            past : '%s ago',                                                                                           // 1005\n            s : 'a few seconds',                                                                                       // 1006\n            m : 'a minute',                                                                                            // 1007\n            mm : '%d minutes',                                                                                         // 1008\n            h : 'an hour',                                                                                             // 1009\n            hh : '%d hours',                                                                                           // 1010\n            d : 'a day',                                                                                               // 1011\n            dd : '%d days',                                                                                            // 1012\n            M : 'a month',                                                                                             // 1013\n            MM : '%d months',                                                                                          // 1014\n            y : 'a year',                                                                                              // 1015\n            yy : '%d years'                                                                                            // 1016\n        },                                                                                                             // 1017\n                                                                                                                       // 1018\n        relativeTime : function (number, withoutSuffix, string, isFuture) {                                            // 1019\n            var output = this._relativeTime[string];                                                                   // 1020\n            return (typeof output === 'function') ?                                                                    // 1021\n                output(number, withoutSuffix, string, isFuture) :                                                      // 1022\n                output.replace(/%d/i, number);                                                                         // 1023\n        },                                                                                                             // 1024\n                                                                                                                       // 1025\n        pastFuture : function (diff, output) {                                                                         // 1026\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                             // 1027\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);                      // 1028\n        },                                                                                                             // 1029\n                                                                                                                       // 1030\n        ordinal : function (number) {                                                                                  // 1031\n            return this._ordinal.replace('%d', number);                                                                // 1032\n        },                                                                                                             // 1033\n        _ordinal : '%d',                                                                                               // 1034\n        _ordinalParse : /\\d{1,2}/,                                                                                     // 1035\n                                                                                                                       // 1036\n        preparse : function (string) {                                                                                 // 1037\n            return string;                                                                                             // 1038\n        },                                                                                                             // 1039\n                                                                                                                       // 1040\n        postformat : function (string) {                                                                               // 1041\n            return string;                                                                                             // 1042\n        },                                                                                                             // 1043\n                                                                                                                       // 1044\n        week : function (mom) {                                                                                        // 1045\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;                                               // 1046\n        },                                                                                                             // 1047\n                                                                                                                       // 1048\n        _week : {                                                                                                      // 1049\n            dow : 0, // Sunday is the first day of the week.                                                           // 1050\n            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 1051\n        },                                                                                                             // 1052\n                                                                                                                       // 1053\n        firstDayOfWeek : function () {                                                                                 // 1054\n            return this._week.dow;                                                                                     // 1055\n        },                                                                                                             // 1056\n                                                                                                                       // 1057\n        firstDayOfYear : function () {                                                                                 // 1058\n            return this._week.doy;                                                                                     // 1059\n        },                                                                                                             // 1060\n                                                                                                                       // 1061\n        _invalidDate: 'Invalid date',                                                                                  // 1062\n        invalidDate: function () {                                                                                     // 1063\n            return this._invalidDate;                                                                                  // 1064\n        }                                                                                                              // 1065\n    });                                                                                                                // 1066\n                                                                                                                       // 1067\n    /************************************                                                                              // 1068\n        Formatting                                                                                                     // 1069\n    ************************************/                                                                              // 1070\n                                                                                                                       // 1071\n                                                                                                                       // 1072\n    function removeFormattingTokens(input) {                                                                           // 1073\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                 // 1074\n            return input.replace(/^\\[|\\]$/g, '');                                                                      // 1075\n        }                                                                                                              // 1076\n        return input.replace(/\\\\/g, '');                                                                               // 1077\n    }                                                                                                                  // 1078\n                                                                                                                       // 1079\n    function makeFormatFunction(format) {                                                                              // 1080\n        var array = format.match(formattingTokens), i, length;                                                         // 1081\n                                                                                                                       // 1082\n        for (i = 0, length = array.length; i < length; i++) {                                                          // 1083\n            if (formatTokenFunctions[array[i]]) {                                                                      // 1084\n                array[i] = formatTokenFunctions[array[i]];                                                             // 1085\n            } else {                                                                                                   // 1086\n                array[i] = removeFormattingTokens(array[i]);                                                           // 1087\n            }                                                                                                          // 1088\n        }                                                                                                              // 1089\n                                                                                                                       // 1090\n        return function (mom) {                                                                                        // 1091\n            var output = '';                                                                                           // 1092\n            for (i = 0; i < length; i++) {                                                                             // 1093\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 1094\n            }                                                                                                          // 1095\n            return output;                                                                                             // 1096\n        };                                                                                                             // 1097\n    }                                                                                                                  // 1098\n                                                                                                                       // 1099\n    // format date using native date object                                                                            // 1100\n    function formatMoment(m, format) {                                                                                 // 1101\n        if (!m.isValid()) {                                                                                            // 1102\n            return m.localeData().invalidDate();                                                                       // 1103\n        }                                                                                                              // 1104\n                                                                                                                       // 1105\n        format = expandFormat(format, m.localeData());                                                                 // 1106\n                                                                                                                       // 1107\n        if (!formatFunctions[format]) {                                                                                // 1108\n            formatFunctions[format] = makeFormatFunction(format);                                                      // 1109\n        }                                                                                                              // 1110\n                                                                                                                       // 1111\n        return formatFunctions[format](m);                                                                             // 1112\n    }                                                                                                                  // 1113\n                                                                                                                       // 1114\n    function expandFormat(format, locale) {                                                                            // 1115\n        var i = 5;                                                                                                     // 1116\n                                                                                                                       // 1117\n        function replaceLongDateFormatTokens(input) {                                                                  // 1118\n            return locale.longDateFormat(input) || input;                                                              // 1119\n        }                                                                                                              // 1120\n                                                                                                                       // 1121\n        localFormattingTokens.lastIndex = 0;                                                                           // 1122\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 1123\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 1124\n            localFormattingTokens.lastIndex = 0;                                                                       // 1125\n            i -= 1;                                                                                                    // 1126\n        }                                                                                                              // 1127\n                                                                                                                       // 1128\n        return format;                                                                                                 // 1129\n    }                                                                                                                  // 1130\n                                                                                                                       // 1131\n                                                                                                                       // 1132\n    /************************************                                                                              // 1133\n        Parsing                                                                                                        // 1134\n    ************************************/                                                                              // 1135\n                                                                                                                       // 1136\n                                                                                                                       // 1137\n    // get the regex to find the next token                                                                            // 1138\n    function getParseRegexForToken(token, config) {                                                                    // 1139\n        var a, strict = config._strict;                                                                                // 1140\n        switch (token) {                                                                                               // 1141\n        case 'Q':                                                                                                      // 1142\n            return parseTokenOneDigit;                                                                                 // 1143\n        case 'DDDD':                                                                                                   // 1144\n            return parseTokenThreeDigits;                                                                              // 1145\n        case 'YYYY':                                                                                                   // 1146\n        case 'GGGG':                                                                                                   // 1147\n        case 'gggg':                                                                                                   // 1148\n            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;                                          // 1149\n        case 'Y':                                                                                                      // 1150\n        case 'G':                                                                                                      // 1151\n        case 'g':                                                                                                      // 1152\n            return parseTokenSignedNumber;                                                                             // 1153\n        case 'YYYYYY':                                                                                                 // 1154\n        case 'YYYYY':                                                                                                  // 1155\n        case 'GGGGG':                                                                                                  // 1156\n        case 'ggggg':                                                                                                  // 1157\n            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;                                            // 1158\n        case 'S':                                                                                                      // 1159\n            if (strict) {                                                                                              // 1160\n                return parseTokenOneDigit;                                                                             // 1161\n            }                                                                                                          // 1162\n            /* falls through */                                                                                        // 1163\n        case 'SS':                                                                                                     // 1164\n            if (strict) {                                                                                              // 1165\n                return parseTokenTwoDigits;                                                                            // 1166\n            }                                                                                                          // 1167\n            /* falls through */                                                                                        // 1168\n        case 'SSS':                                                                                                    // 1169\n            if (strict) {                                                                                              // 1170\n                return parseTokenThreeDigits;                                                                          // 1171\n            }                                                                                                          // 1172\n            /* falls through */                                                                                        // 1173\n        case 'DDD':                                                                                                    // 1174\n            return parseTokenOneToThreeDigits;                                                                         // 1175\n        case 'MMM':                                                                                                    // 1176\n        case 'MMMM':                                                                                                   // 1177\n        case 'dd':                                                                                                     // 1178\n        case 'ddd':                                                                                                    // 1179\n        case 'dddd':                                                                                                   // 1180\n            return parseTokenWord;                                                                                     // 1181\n        case 'a':                                                                                                      // 1182\n        case 'A':                                                                                                      // 1183\n            return config._locale._meridiemParse;                                                                      // 1184\n        case 'x':                                                                                                      // 1185\n            return parseTokenOffsetMs;                                                                                 // 1186\n        case 'X':                                                                                                      // 1187\n            return parseTokenTimestampMs;                                                                              // 1188\n        case 'Z':                                                                                                      // 1189\n        case 'ZZ':                                                                                                     // 1190\n            return parseTokenTimezone;                                                                                 // 1191\n        case 'T':                                                                                                      // 1192\n            return parseTokenT;                                                                                        // 1193\n        case 'SSSS':                                                                                                   // 1194\n            return parseTokenDigits;                                                                                   // 1195\n        case 'MM':                                                                                                     // 1196\n        case 'DD':                                                                                                     // 1197\n        case 'YY':                                                                                                     // 1198\n        case 'GG':                                                                                                     // 1199\n        case 'gg':                                                                                                     // 1200\n        case 'HH':                                                                                                     // 1201\n        case 'hh':                                                                                                     // 1202\n        case 'mm':                                                                                                     // 1203\n        case 'ss':                                                                                                     // 1204\n        case 'ww':                                                                                                     // 1205\n        case 'WW':                                                                                                     // 1206\n            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;                                            // 1207\n        case 'M':                                                                                                      // 1208\n        case 'D':                                                                                                      // 1209\n        case 'd':                                                                                                      // 1210\n        case 'H':                                                                                                      // 1211\n        case 'h':                                                                                                      // 1212\n        case 'm':                                                                                                      // 1213\n        case 's':                                                                                                      // 1214\n        case 'w':                                                                                                      // 1215\n        case 'W':                                                                                                      // 1216\n        case 'e':                                                                                                      // 1217\n        case 'E':                                                                                                      // 1218\n            return parseTokenOneOrTwoDigits;                                                                           // 1219\n        case 'Do':                                                                                                     // 1220\n            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;                        // 1221\n        default :                                                                                                      // 1222\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), 'i'));                                // 1223\n            return a;                                                                                                  // 1224\n        }                                                                                                              // 1225\n    }                                                                                                                  // 1226\n                                                                                                                       // 1227\n    function utcOffsetFromString(string) {                                                                             // 1228\n        string = string || '';                                                                                         // 1229\n        var possibleTzMatches = (string.match(parseTokenTimezone) || []),                                              // 1230\n            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],                                           // 1231\n            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],                                         // 1232\n            minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 1233\n                                                                                                                       // 1234\n        return parts[0] === '+' ? minutes : -minutes;                                                                  // 1235\n    }                                                                                                                  // 1236\n                                                                                                                       // 1237\n    // function to convert string input to date                                                                        // 1238\n    function addTimeToArrayFromToken(token, input, config) {                                                           // 1239\n        var a, datePartArray = config._a;                                                                              // 1240\n                                                                                                                       // 1241\n        switch (token) {                                                                                               // 1242\n        // QUARTER                                                                                                     // 1243\n        case 'Q':                                                                                                      // 1244\n            if (input != null) {                                                                                       // 1245\n                datePartArray[MONTH] = (toInt(input) - 1) * 3;                                                         // 1246\n            }                                                                                                          // 1247\n            break;                                                                                                     // 1248\n        // MONTH                                                                                                       // 1249\n        case 'M' : // fall through to MM                                                                               // 1250\n        case 'MM' :                                                                                                    // 1251\n            if (input != null) {                                                                                       // 1252\n                datePartArray[MONTH] = toInt(input) - 1;                                                               // 1253\n            }                                                                                                          // 1254\n            break;                                                                                                     // 1255\n        case 'MMM' : // fall through to MMMM                                                                           // 1256\n        case 'MMMM' :                                                                                                  // 1257\n            a = config._locale.monthsParse(input, token, config._strict);                                              // 1258\n            // if we didn't find a month name, mark the date as invalid.                                               // 1259\n            if (a != null) {                                                                                           // 1260\n                datePartArray[MONTH] = a;                                                                              // 1261\n            } else {                                                                                                   // 1262\n                config._pf.invalidMonth = input;                                                                       // 1263\n            }                                                                                                          // 1264\n            break;                                                                                                     // 1265\n        // DAY OF MONTH                                                                                                // 1266\n        case 'D' : // fall through to DD                                                                               // 1267\n        case 'DD' :                                                                                                    // 1268\n            if (input != null) {                                                                                       // 1269\n                datePartArray[DATE] = toInt(input);                                                                    // 1270\n            }                                                                                                          // 1271\n            break;                                                                                                     // 1272\n        case 'Do' :                                                                                                    // 1273\n            if (input != null) {                                                                                       // 1274\n                datePartArray[DATE] = toInt(parseInt(                                                                  // 1275\n                            input.match(/\\d{1,2}/)[0], 10));                                                           // 1276\n            }                                                                                                          // 1277\n            break;                                                                                                     // 1278\n        // DAY OF YEAR                                                                                                 // 1279\n        case 'DDD' : // fall through to DDDD                                                                           // 1280\n        case 'DDDD' :                                                                                                  // 1281\n            if (input != null) {                                                                                       // 1282\n                config._dayOfYear = toInt(input);                                                                      // 1283\n            }                                                                                                          // 1284\n                                                                                                                       // 1285\n            break;                                                                                                     // 1286\n        // YEAR                                                                                                        // 1287\n        case 'YY' :                                                                                                    // 1288\n            datePartArray[YEAR] = moment.parseTwoDigitYear(input);                                                     // 1289\n            break;                                                                                                     // 1290\n        case 'YYYY' :                                                                                                  // 1291\n        case 'YYYYY' :                                                                                                 // 1292\n        case 'YYYYYY' :                                                                                                // 1293\n            datePartArray[YEAR] = toInt(input);                                                                        // 1294\n            break;                                                                                                     // 1295\n        // AM / PM                                                                                                     // 1296\n        case 'a' : // fall through to A                                                                                // 1297\n        case 'A' :                                                                                                     // 1298\n            config._meridiem = input;                                                                                  // 1299\n            // config._isPm = config._locale.isPM(input);                                                              // 1300\n            break;                                                                                                     // 1301\n        // HOUR                                                                                                        // 1302\n        case 'h' : // fall through to hh                                                                               // 1303\n        case 'hh' :                                                                                                    // 1304\n            config._pf.bigHour = true;                                                                                 // 1305\n            /* falls through */                                                                                        // 1306\n        case 'H' : // fall through to HH                                                                               // 1307\n        case 'HH' :                                                                                                    // 1308\n            datePartArray[HOUR] = toInt(input);                                                                        // 1309\n            break;                                                                                                     // 1310\n        // MINUTE                                                                                                      // 1311\n        case 'm' : // fall through to mm                                                                               // 1312\n        case 'mm' :                                                                                                    // 1313\n            datePartArray[MINUTE] = toInt(input);                                                                      // 1314\n            break;                                                                                                     // 1315\n        // SECOND                                                                                                      // 1316\n        case 's' : // fall through to ss                                                                               // 1317\n        case 'ss' :                                                                                                    // 1318\n            datePartArray[SECOND] = toInt(input);                                                                      // 1319\n            break;                                                                                                     // 1320\n        // MILLISECOND                                                                                                 // 1321\n        case 'S' :                                                                                                     // 1322\n        case 'SS' :                                                                                                    // 1323\n        case 'SSS' :                                                                                                   // 1324\n        case 'SSSS' :                                                                                                  // 1325\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);                                                 // 1326\n            break;                                                                                                     // 1327\n        // UNIX OFFSET (MILLISECONDS)                                                                                  // 1328\n        case 'x':                                                                                                      // 1329\n            config._d = new Date(toInt(input));                                                                        // 1330\n            break;                                                                                                     // 1331\n        // UNIX TIMESTAMP WITH MS                                                                                      // 1332\n        case 'X':                                                                                                      // 1333\n            config._d = new Date(parseFloat(input) * 1000);                                                            // 1334\n            break;                                                                                                     // 1335\n        // TIMEZONE                                                                                                    // 1336\n        case 'Z' : // fall through to ZZ                                                                               // 1337\n        case 'ZZ' :                                                                                                    // 1338\n            config._useUTC = true;                                                                                     // 1339\n            config._tzm = utcOffsetFromString(input);                                                                  // 1340\n            break;                                                                                                     // 1341\n        // WEEKDAY - human                                                                                             // 1342\n        case 'dd':                                                                                                     // 1343\n        case 'ddd':                                                                                                    // 1344\n        case 'dddd':                                                                                                   // 1345\n            a = config._locale.weekdaysParse(input);                                                                   // 1346\n            // if we didn't get a weekday name, mark the date as invalid                                               // 1347\n            if (a != null) {                                                                                           // 1348\n                config._w = config._w || {};                                                                           // 1349\n                config._w['d'] = a;                                                                                    // 1350\n            } else {                                                                                                   // 1351\n                config._pf.invalidWeekday = input;                                                                     // 1352\n            }                                                                                                          // 1353\n            break;                                                                                                     // 1354\n        // WEEK, WEEK DAY - numeric                                                                                    // 1355\n        case 'w':                                                                                                      // 1356\n        case 'ww':                                                                                                     // 1357\n        case 'W':                                                                                                      // 1358\n        case 'WW':                                                                                                     // 1359\n        case 'd':                                                                                                      // 1360\n        case 'e':                                                                                                      // 1361\n        case 'E':                                                                                                      // 1362\n            token = token.substr(0, 1);                                                                                // 1363\n            /* falls through */                                                                                        // 1364\n        case 'gggg':                                                                                                   // 1365\n        case 'GGGG':                                                                                                   // 1366\n        case 'GGGGG':                                                                                                  // 1367\n            token = token.substr(0, 2);                                                                                // 1368\n            if (input) {                                                                                               // 1369\n                config._w = config._w || {};                                                                           // 1370\n                config._w[token] = toInt(input);                                                                       // 1371\n            }                                                                                                          // 1372\n            break;                                                                                                     // 1373\n        case 'gg':                                                                                                     // 1374\n        case 'GG':                                                                                                     // 1375\n            config._w = config._w || {};                                                                               // 1376\n            config._w[token] = moment.parseTwoDigitYear(input);                                                        // 1377\n        }                                                                                                              // 1378\n    }                                                                                                                  // 1379\n                                                                                                                       // 1380\n    function dayOfYearFromWeekInfo(config) {                                                                           // 1381\n        var w, weekYear, week, weekday, dow, doy, temp;                                                                // 1382\n                                                                                                                       // 1383\n        w = config._w;                                                                                                 // 1384\n        if (w.GG != null || w.W != null || w.E != null) {                                                              // 1385\n            dow = 1;                                                                                                   // 1386\n            doy = 4;                                                                                                   // 1387\n                                                                                                                       // 1388\n            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 1389\n            // how we interpret now (local, utc, fixed offset). So create                                              // 1390\n            // a now version of current config (take local/utc/offset flags, and                                       // 1391\n            // create now).                                                                                            // 1392\n            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);                                    // 1393\n            week = dfl(w.W, 1);                                                                                        // 1394\n            weekday = dfl(w.E, 1);                                                                                     // 1395\n        } else {                                                                                                       // 1396\n            dow = config._locale._week.dow;                                                                            // 1397\n            doy = config._locale._week.doy;                                                                            // 1398\n                                                                                                                       // 1399\n            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);                                // 1400\n            week = dfl(w.w, 1);                                                                                        // 1401\n                                                                                                                       // 1402\n            if (w.d != null) {                                                                                         // 1403\n                // weekday -- low day numbers are considered next week                                                 // 1404\n                weekday = w.d;                                                                                         // 1405\n                if (weekday < dow) {                                                                                   // 1406\n                    ++week;                                                                                            // 1407\n                }                                                                                                      // 1408\n            } else if (w.e != null) {                                                                                  // 1409\n                // local weekday -- counting starts from begining of week                                              // 1410\n                weekday = w.e + dow;                                                                                   // 1411\n            } else {                                                                                                   // 1412\n                // default to begining of week                                                                         // 1413\n                weekday = dow;                                                                                         // 1414\n            }                                                                                                          // 1415\n        }                                                                                                              // 1416\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);                                                  // 1417\n                                                                                                                       // 1418\n        config._a[YEAR] = temp.year;                                                                                   // 1419\n        config._dayOfYear = temp.dayOfYear;                                                                            // 1420\n    }                                                                                                                  // 1421\n                                                                                                                       // 1422\n    // convert an array to a date.                                                                                     // 1423\n    // the array should mirror the parameters below                                                                    // 1424\n    // note: all values past the year are optional and will default to the lowest possible value.                      // 1425\n    // [year, month, day , hour, minute, second, millisecond]                                                          // 1426\n    function dateFromConfig(config) {                                                                                  // 1427\n        var i, date, input = [], currentDate, yearToUse;                                                               // 1428\n                                                                                                                       // 1429\n        if (config._d) {                                                                                               // 1430\n            return;                                                                                                    // 1431\n        }                                                                                                              // 1432\n                                                                                                                       // 1433\n        currentDate = currentDateArray(config);                                                                        // 1434\n                                                                                                                       // 1435\n        //compute day of the year from weeks and weekdays                                                              // 1436\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 1437\n            dayOfYearFromWeekInfo(config);                                                                             // 1438\n        }                                                                                                              // 1439\n                                                                                                                       // 1440\n        //if the day of the year is set, figure out what it is                                                         // 1441\n        if (config._dayOfYear) {                                                                                       // 1442\n            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);                                                       // 1443\n                                                                                                                       // 1444\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 1445\n                config._pf._overflowDayOfYear = true;                                                                  // 1446\n            }                                                                                                          // 1447\n                                                                                                                       // 1448\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 1449\n            config._a[MONTH] = date.getUTCMonth();                                                                     // 1450\n            config._a[DATE] = date.getUTCDate();                                                                       // 1451\n        }                                                                                                              // 1452\n                                                                                                                       // 1453\n        // Default to current date.                                                                                    // 1454\n        // * if no year, month, day of month are given, default to today                                               // 1455\n        // * if day of month is given, default month and year                                                          // 1456\n        // * if month is given, default only year                                                                      // 1457\n        // * if year is given, don't default anything                                                                  // 1458\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 1459\n            config._a[i] = input[i] = currentDate[i];                                                                  // 1460\n        }                                                                                                              // 1461\n                                                                                                                       // 1462\n        // Zero out whatever was not defaulted, including time                                                         // 1463\n        for (; i < 7; i++) {                                                                                           // 1464\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 1465\n        }                                                                                                              // 1466\n                                                                                                                       // 1467\n        // Check for 24:00:00.000                                                                                      // 1468\n        if (config._a[HOUR] === 24 &&                                                                                  // 1469\n                config._a[MINUTE] === 0 &&                                                                             // 1470\n                config._a[SECOND] === 0 &&                                                                             // 1471\n                config._a[MILLISECOND] === 0) {                                                                        // 1472\n            config._nextDay = true;                                                                                    // 1473\n            config._a[HOUR] = 0;                                                                                       // 1474\n        }                                                                                                              // 1475\n                                                                                                                       // 1476\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);                                      // 1477\n        // Apply timezone offset from input. The actual utcOffset can be changed                                       // 1478\n        // with parseZone.                                                                                             // 1479\n        if (config._tzm != null) {                                                                                     // 1480\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                          // 1481\n        }                                                                                                              // 1482\n                                                                                                                       // 1483\n        if (config._nextDay) {                                                                                         // 1484\n            config._a[HOUR] = 24;                                                                                      // 1485\n        }                                                                                                              // 1486\n    }                                                                                                                  // 1487\n                                                                                                                       // 1488\n    function dateFromObject(config) {                                                                                  // 1489\n        var normalizedInput;                                                                                           // 1490\n                                                                                                                       // 1491\n        if (config._d) {                                                                                               // 1492\n            return;                                                                                                    // 1493\n        }                                                                                                              // 1494\n                                                                                                                       // 1495\n        normalizedInput = normalizeObjectUnits(config._i);                                                             // 1496\n        config._a = [                                                                                                  // 1497\n            normalizedInput.year,                                                                                      // 1498\n            normalizedInput.month,                                                                                     // 1499\n            normalizedInput.day || normalizedInput.date,                                                               // 1500\n            normalizedInput.hour,                                                                                      // 1501\n            normalizedInput.minute,                                                                                    // 1502\n            normalizedInput.second,                                                                                    // 1503\n            normalizedInput.millisecond                                                                                // 1504\n        ];                                                                                                             // 1505\n                                                                                                                       // 1506\n        dateFromConfig(config);                                                                                        // 1507\n    }                                                                                                                  // 1508\n                                                                                                                       // 1509\n    function currentDateArray(config) {                                                                                // 1510\n        var now = new Date();                                                                                          // 1511\n        if (config._useUTC) {                                                                                          // 1512\n            return [                                                                                                   // 1513\n                now.getUTCFullYear(),                                                                                  // 1514\n                now.getUTCMonth(),                                                                                     // 1515\n                now.getUTCDate()                                                                                       // 1516\n            ];                                                                                                         // 1517\n        } else {                                                                                                       // 1518\n            return [now.getFullYear(), now.getMonth(), now.getDate()];                                                 // 1519\n        }                                                                                                              // 1520\n    }                                                                                                                  // 1521\n                                                                                                                       // 1522\n    // date from string and format string                                                                              // 1523\n    function makeDateFromStringAndFormat(config) {                                                                     // 1524\n        if (config._f === moment.ISO_8601) {                                                                           // 1525\n            parseISO(config);                                                                                          // 1526\n            return;                                                                                                    // 1527\n        }                                                                                                              // 1528\n                                                                                                                       // 1529\n        config._a = [];                                                                                                // 1530\n        config._pf.empty = true;                                                                                       // 1531\n                                                                                                                       // 1532\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 1533\n        var string = '' + config._i,                                                                                   // 1534\n            i, parsedInput, tokens, token, skipped,                                                                    // 1535\n            stringLength = string.length,                                                                              // 1536\n            totalParsedInputLength = 0;                                                                                // 1537\n                                                                                                                       // 1538\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 1539\n                                                                                                                       // 1540\n        for (i = 0; i < tokens.length; i++) {                                                                          // 1541\n            token = tokens[i];                                                                                         // 1542\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 1543\n            if (parsedInput) {                                                                                         // 1544\n                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 1545\n                if (skipped.length > 0) {                                                                              // 1546\n                    config._pf.unusedInput.push(skipped);                                                              // 1547\n                }                                                                                                      // 1548\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 1549\n                totalParsedInputLength += parsedInput.length;                                                          // 1550\n            }                                                                                                          // 1551\n            // don't parse if it's not a known token                                                                   // 1552\n            if (formatTokenFunctions[token]) {                                                                         // 1553\n                if (parsedInput) {                                                                                     // 1554\n                    config._pf.empty = false;                                                                          // 1555\n                }                                                                                                      // 1556\n                else {                                                                                                 // 1557\n                    config._pf.unusedTokens.push(token);                                                               // 1558\n                }                                                                                                      // 1559\n                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 1560\n            }                                                                                                          // 1561\n            else if (config._strict && !parsedInput) {                                                                 // 1562\n                config._pf.unusedTokens.push(token);                                                                   // 1563\n            }                                                                                                          // 1564\n        }                                                                                                              // 1565\n                                                                                                                       // 1566\n        // add remaining unparsed input length to the string                                                           // 1567\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;                                              // 1568\n        if (string.length > 0) {                                                                                       // 1569\n            config._pf.unusedInput.push(string);                                                                       // 1570\n        }                                                                                                              // 1571\n                                                                                                                       // 1572\n        // clear _12h flag if hour is <= 12                                                                            // 1573\n        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {                                                    // 1574\n            config._pf.bigHour = undefined;                                                                            // 1575\n        }                                                                                                              // 1576\n        // handle meridiem                                                                                             // 1577\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],                                             // 1578\n                config._meridiem);                                                                                     // 1579\n        dateFromConfig(config);                                                                                        // 1580\n        checkOverflow(config);                                                                                         // 1581\n    }                                                                                                                  // 1582\n                                                                                                                       // 1583\n    function unescapeFormat(s) {                                                                                       // 1584\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {                   // 1585\n            return p1 || p2 || p3 || p4;                                                                               // 1586\n        });                                                                                                            // 1587\n    }                                                                                                                  // 1588\n                                                                                                                       // 1589\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 1590\n    function regexpEscape(s) {                                                                                         // 1591\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                            // 1592\n    }                                                                                                                  // 1593\n                                                                                                                       // 1594\n    // date from string and array of format strings                                                                    // 1595\n    function makeDateFromStringAndArray(config) {                                                                      // 1596\n        var tempConfig,                                                                                                // 1597\n            bestMoment,                                                                                                // 1598\n                                                                                                                       // 1599\n            scoreToBeat,                                                                                               // 1600\n            i,                                                                                                         // 1601\n            currentScore;                                                                                              // 1602\n                                                                                                                       // 1603\n        if (config._f.length === 0) {                                                                                  // 1604\n            config._pf.invalidFormat = true;                                                                           // 1605\n            config._d = new Date(NaN);                                                                                 // 1606\n            return;                                                                                                    // 1607\n        }                                                                                                              // 1608\n                                                                                                                       // 1609\n        for (i = 0; i < config._f.length; i++) {                                                                       // 1610\n            currentScore = 0;                                                                                          // 1611\n            tempConfig = copyConfig({}, config);                                                                       // 1612\n            if (config._useUTC != null) {                                                                              // 1613\n                tempConfig._useUTC = config._useUTC;                                                                   // 1614\n            }                                                                                                          // 1615\n            tempConfig._pf = defaultParsingFlags();                                                                    // 1616\n            tempConfig._f = config._f[i];                                                                              // 1617\n            makeDateFromStringAndFormat(tempConfig);                                                                   // 1618\n                                                                                                                       // 1619\n            if (!isValid(tempConfig)) {                                                                                // 1620\n                continue;                                                                                              // 1621\n            }                                                                                                          // 1622\n                                                                                                                       // 1623\n            // if there is any input that was not parsed add a penalty for that format                                 // 1624\n            currentScore += tempConfig._pf.charsLeftOver;                                                              // 1625\n                                                                                                                       // 1626\n            //or tokens                                                                                                // 1627\n            currentScore += tempConfig._pf.unusedTokens.length * 10;                                                   // 1628\n                                                                                                                       // 1629\n            tempConfig._pf.score = currentScore;                                                                       // 1630\n                                                                                                                       // 1631\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 1632\n                scoreToBeat = currentScore;                                                                            // 1633\n                bestMoment = tempConfig;                                                                               // 1634\n            }                                                                                                          // 1635\n        }                                                                                                              // 1636\n                                                                                                                       // 1637\n        extend(config, bestMoment || tempConfig);                                                                      // 1638\n    }                                                                                                                  // 1639\n                                                                                                                       // 1640\n    // date from iso format                                                                                            // 1641\n    function parseISO(config) {                                                                                        // 1642\n        var i, l,                                                                                                      // 1643\n            string = config._i,                                                                                        // 1644\n            match = isoRegex.exec(string);                                                                             // 1645\n                                                                                                                       // 1646\n        if (match) {                                                                                                   // 1647\n            config._pf.iso = true;                                                                                     // 1648\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 1649\n                if (isoDates[i][1].exec(string)) {                                                                     // 1650\n                    // match[5] should be 'T' or undefined                                                             // 1651\n                    config._f = isoDates[i][0] + (match[6] || ' ');                                                    // 1652\n                    break;                                                                                             // 1653\n                }                                                                                                      // 1654\n            }                                                                                                          // 1655\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                             // 1656\n                if (isoTimes[i][1].exec(string)) {                                                                     // 1657\n                    config._f += isoTimes[i][0];                                                                       // 1658\n                    break;                                                                                             // 1659\n                }                                                                                                      // 1660\n            }                                                                                                          // 1661\n            if (string.match(parseTokenTimezone)) {                                                                    // 1662\n                config._f += 'Z';                                                                                      // 1663\n            }                                                                                                          // 1664\n            makeDateFromStringAndFormat(config);                                                                       // 1665\n        } else {                                                                                                       // 1666\n            config._isValid = false;                                                                                   // 1667\n        }                                                                                                              // 1668\n    }                                                                                                                  // 1669\n                                                                                                                       // 1670\n    // date from iso format or fallback                                                                                // 1671\n    function makeDateFromString(config) {                                                                              // 1672\n        parseISO(config);                                                                                              // 1673\n        if (config._isValid === false) {                                                                               // 1674\n            delete config._isValid;                                                                                    // 1675\n            moment.createFromInputFallback(config);                                                                    // 1676\n        }                                                                                                              // 1677\n    }                                                                                                                  // 1678\n                                                                                                                       // 1679\n    function map(arr, fn) {                                                                                            // 1680\n        var res = [], i;                                                                                               // 1681\n        for (i = 0; i < arr.length; ++i) {                                                                             // 1682\n            res.push(fn(arr[i], i));                                                                                   // 1683\n        }                                                                                                              // 1684\n        return res;                                                                                                    // 1685\n    }                                                                                                                  // 1686\n                                                                                                                       // 1687\n    function makeDateFromInput(config) {                                                                               // 1688\n        var input = config._i, matched;                                                                                // 1689\n        if (input === undefined) {                                                                                     // 1690\n            config._d = new Date();                                                                                    // 1691\n        } else if (isDate(input)) {                                                                                    // 1692\n            config._d = new Date(+input);                                                                              // 1693\n        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {                                                 // 1694\n            config._d = new Date(+matched[1]);                                                                         // 1695\n        } else if (typeof input === 'string') {                                                                        // 1696\n            makeDateFromString(config);                                                                                // 1697\n        } else if (isArray(input)) {                                                                                   // 1698\n            config._a = map(input.slice(0), function (obj) {                                                           // 1699\n                return parseInt(obj, 10);                                                                              // 1700\n            });                                                                                                        // 1701\n            dateFromConfig(config);                                                                                    // 1702\n        } else if (typeof(input) === 'object') {                                                                       // 1703\n            dateFromObject(config);                                                                                    // 1704\n        } else if (typeof(input) === 'number') {                                                                       // 1705\n            // from milliseconds                                                                                       // 1706\n            config._d = new Date(input);                                                                               // 1707\n        } else {                                                                                                       // 1708\n            moment.createFromInputFallback(config);                                                                    // 1709\n        }                                                                                                              // 1710\n    }                                                                                                                  // 1711\n                                                                                                                       // 1712\n    function makeDate(y, m, d, h, M, s, ms) {                                                                          // 1713\n        //can't just apply() to create a date:                                                                         // 1714\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 1716\n                                                                                                                       // 1717\n        //the date constructor doesn't accept years < 1970                                                             // 1718\n        if (y < 1970) {                                                                                                // 1719\n            date.setFullYear(y);                                                                                       // 1720\n        }                                                                                                              // 1721\n        return date;                                                                                                   // 1722\n    }                                                                                                                  // 1723\n                                                                                                                       // 1724\n    function makeUTCDate(y) {                                                                                          // 1725\n        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 1726\n        if (y < 1970) {                                                                                                // 1727\n            date.setUTCFullYear(y);                                                                                    // 1728\n        }                                                                                                              // 1729\n        return date;                                                                                                   // 1730\n    }                                                                                                                  // 1731\n                                                                                                                       // 1732\n    function parseWeekday(input, locale) {                                                                             // 1733\n        if (typeof input === 'string') {                                                                               // 1734\n            if (!isNaN(input)) {                                                                                       // 1735\n                input = parseInt(input, 10);                                                                           // 1736\n            }                                                                                                          // 1737\n            else {                                                                                                     // 1738\n                input = locale.weekdaysParse(input);                                                                   // 1739\n                if (typeof input !== 'number') {                                                                       // 1740\n                    return null;                                                                                       // 1741\n                }                                                                                                      // 1742\n            }                                                                                                          // 1743\n        }                                                                                                              // 1744\n        return input;                                                                                                  // 1745\n    }                                                                                                                  // 1746\n                                                                                                                       // 1747\n    /************************************                                                                              // 1748\n        Relative Time                                                                                                  // 1749\n    ************************************/                                                                              // 1750\n                                                                                                                       // 1751\n                                                                                                                       // 1752\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 1753\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 1754\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 1755\n    }                                                                                                                  // 1756\n                                                                                                                       // 1757\n    function relativeTime(posNegDuration, withoutSuffix, locale) {                                                     // 1758\n        var duration = moment.duration(posNegDuration).abs(),                                                          // 1759\n            seconds = round(duration.as('s')),                                                                         // 1760\n            minutes = round(duration.as('m')),                                                                         // 1761\n            hours = round(duration.as('h')),                                                                           // 1762\n            days = round(duration.as('d')),                                                                            // 1763\n            months = round(duration.as('M')),                                                                          // 1764\n            years = round(duration.as('y')),                                                                           // 1765\n                                                                                                                       // 1766\n            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||                                             // 1767\n                minutes === 1 && ['m'] ||                                                                              // 1768\n                minutes < relativeTimeThresholds.m && ['mm', minutes] ||                                               // 1769\n                hours === 1 && ['h'] ||                                                                                // 1770\n                hours < relativeTimeThresholds.h && ['hh', hours] ||                                                   // 1771\n                days === 1 && ['d'] ||                                                                                 // 1772\n                days < relativeTimeThresholds.d && ['dd', days] ||                                                     // 1773\n                months === 1 && ['M'] ||                                                                               // 1774\n                months < relativeTimeThresholds.M && ['MM', months] ||                                                 // 1775\n                years === 1 && ['y'] || ['yy', years];                                                                 // 1776\n                                                                                                                       // 1777\n        args[2] = withoutSuffix;                                                                                       // 1778\n        args[3] = +posNegDuration > 0;                                                                                 // 1779\n        args[4] = locale;                                                                                              // 1780\n        return substituteTimeAgo.apply({}, args);                                                                      // 1781\n    }                                                                                                                  // 1782\n                                                                                                                       // 1783\n                                                                                                                       // 1784\n    /************************************                                                                              // 1785\n        Week of Year                                                                                                   // 1786\n    ************************************/                                                                              // 1787\n                                                                                                                       // 1788\n                                                                                                                       // 1789\n    // firstDayOfWeek       0 = sun, 6 = sat                                                                           // 1790\n    //                      the day of the week that starts the week                                                   // 1791\n    //                      (usually sunday or monday)                                                                 // 1792\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat                                                                           // 1793\n    //                      the first week is the week that contains the first                                         // 1794\n    //                      of this day of the week                                                                    // 1795\n    //                      (eg. ISO weeks use thursday (4))                                                           // 1796\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {                                                   // 1797\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,                                                               // 1798\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),                                                        // 1799\n            adjustedMoment;                                                                                            // 1800\n                                                                                                                       // 1801\n                                                                                                                       // 1802\n        if (daysToDayOfWeek > end) {                                                                                   // 1803\n            daysToDayOfWeek -= 7;                                                                                      // 1804\n        }                                                                                                              // 1805\n                                                                                                                       // 1806\n        if (daysToDayOfWeek < end - 7) {                                                                               // 1807\n            daysToDayOfWeek += 7;                                                                                      // 1808\n        }                                                                                                              // 1809\n                                                                                                                       // 1810\n        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');                                                        // 1811\n        return {                                                                                                       // 1812\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),                                                           // 1813\n            year: adjustedMoment.year()                                                                                // 1814\n        };                                                                                                             // 1815\n    }                                                                                                                  // 1816\n                                                                                                                       // 1817\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1818\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {                           // 1819\n        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;                                             // 1820\n                                                                                                                       // 1821\n        d = d === 0 ? 7 : d;                                                                                           // 1822\n        weekday = weekday != null ? weekday : firstDayOfWeek;                                                          // 1823\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);            // 1824\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;                                       // 1825\n                                                                                                                       // 1826\n        return {                                                                                                       // 1827\n            year: dayOfYear > 0 ? year : year - 1,                                                                     // 1828\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear                                   // 1829\n        };                                                                                                             // 1830\n    }                                                                                                                  // 1831\n                                                                                                                       // 1832\n    /************************************                                                                              // 1833\n        Top Level Functions                                                                                            // 1834\n    ************************************/                                                                              // 1835\n                                                                                                                       // 1836\n    function makeMoment(config) {                                                                                      // 1837\n        var input = config._i,                                                                                         // 1838\n            format = config._f,                                                                                        // 1839\n            res;                                                                                                       // 1840\n                                                                                                                       // 1841\n        config._locale = config._locale || moment.localeData(config._l);                                               // 1842\n                                                                                                                       // 1843\n        if (input === null || (format === undefined && input === '')) {                                                // 1844\n            return moment.invalid({nullInput: true});                                                                  // 1845\n        }                                                                                                              // 1846\n                                                                                                                       // 1847\n        if (typeof input === 'string') {                                                                               // 1848\n            config._i = input = config._locale.preparse(input);                                                        // 1849\n        }                                                                                                              // 1850\n                                                                                                                       // 1851\n        if (moment.isMoment(input)) {                                                                                  // 1852\n            return new Moment(input, true);                                                                            // 1853\n        } else if (format) {                                                                                           // 1854\n            if (isArray(format)) {                                                                                     // 1855\n                makeDateFromStringAndArray(config);                                                                    // 1856\n            } else {                                                                                                   // 1857\n                makeDateFromStringAndFormat(config);                                                                   // 1858\n            }                                                                                                          // 1859\n        } else {                                                                                                       // 1860\n            makeDateFromInput(config);                                                                                 // 1861\n        }                                                                                                              // 1862\n                                                                                                                       // 1863\n        res = new Moment(config);                                                                                      // 1864\n        if (res._nextDay) {                                                                                            // 1865\n            // Adding is smart enough around DST                                                                       // 1866\n            res.add(1, 'd');                                                                                           // 1867\n            res._nextDay = undefined;                                                                                  // 1868\n        }                                                                                                              // 1869\n                                                                                                                       // 1870\n        return res;                                                                                                    // 1871\n    }                                                                                                                  // 1872\n                                                                                                                       // 1873\n    moment = function (input, format, locale, strict) {                                                                // 1874\n        var c;                                                                                                         // 1875\n                                                                                                                       // 1876\n        if (typeof(locale) === 'boolean') {                                                                            // 1877\n            strict = locale;                                                                                           // 1878\n            locale = undefined;                                                                                        // 1879\n        }                                                                                                              // 1880\n        // object construction must be done this way.                                                                  // 1881\n        // https://github.com/moment/moment/issues/1423                                                                // 1882\n        c = {};                                                                                                        // 1883\n        c._isAMomentObject = true;                                                                                     // 1884\n        c._i = input;                                                                                                  // 1885\n        c._f = format;                                                                                                 // 1886\n        c._l = locale;                                                                                                 // 1887\n        c._strict = strict;                                                                                            // 1888\n        c._isUTC = false;                                                                                              // 1889\n        c._pf = defaultParsingFlags();                                                                                 // 1890\n                                                                                                                       // 1891\n        return makeMoment(c);                                                                                          // 1892\n    };                                                                                                                 // 1893\n                                                                                                                       // 1894\n    moment.suppressDeprecationWarnings = false;                                                                        // 1895\n                                                                                                                       // 1896\n    moment.createFromInputFallback = deprecate(                                                                        // 1897\n        'moment construction falls back to js Date. This is ' +                                                        // 1898\n        'discouraged and will be removed in upcoming major ' +                                                         // 1899\n        'release. Please refer to ' +                                                                                  // 1900\n        'https://github.com/moment/moment/issues/1407 for more info.',                                                 // 1901\n        function (config) {                                                                                            // 1902\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                          // 1903\n        }                                                                                                              // 1904\n    );                                                                                                                 // 1905\n                                                                                                                       // 1906\n    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 1907\n    // other. This relies on the function fn to be transitive.                                                         // 1908\n    //                                                                                                                 // 1909\n    // moments should either be an array of moment objects or an array, whose                                          // 1910\n    // first element is an array of moment objects.                                                                    // 1911\n    function pickBy(fn, moments) {                                                                                     // 1912\n        var res, i;                                                                                                    // 1913\n        if (moments.length === 1 && isArray(moments[0])) {                                                             // 1914\n            moments = moments[0];                                                                                      // 1915\n        }                                                                                                              // 1916\n        if (!moments.length) {                                                                                         // 1917\n            return moment();                                                                                           // 1918\n        }                                                                                                              // 1919\n        res = moments[0];                                                                                              // 1920\n        for (i = 1; i < moments.length; ++i) {                                                                         // 1921\n            if (moments[i][fn](res)) {                                                                                 // 1922\n                res = moments[i];                                                                                      // 1923\n            }                                                                                                          // 1924\n        }                                                                                                              // 1925\n        return res;                                                                                                    // 1926\n    }                                                                                                                  // 1927\n                                                                                                                       // 1928\n    moment.min = function () {                                                                                         // 1929\n        var args = [].slice.call(arguments, 0);                                                                        // 1930\n                                                                                                                       // 1931\n        return pickBy('isBefore', args);                                                                               // 1932\n    };                                                                                                                 // 1933\n                                                                                                                       // 1934\n    moment.max = function () {                                                                                         // 1935\n        var args = [].slice.call(arguments, 0);                                                                        // 1936\n                                                                                                                       // 1937\n        return pickBy('isAfter', args);                                                                                // 1938\n    };                                                                                                                 // 1939\n                                                                                                                       // 1940\n    // creating with utc                                                                                               // 1941\n    moment.utc = function (input, format, locale, strict) {                                                            // 1942\n        var c;                                                                                                         // 1943\n                                                                                                                       // 1944\n        if (typeof(locale) === 'boolean') {                                                                            // 1945\n            strict = locale;                                                                                           // 1946\n            locale = undefined;                                                                                        // 1947\n        }                                                                                                              // 1948\n        // object construction must be done this way.                                                                  // 1949\n        // https://github.com/moment/moment/issues/1423                                                                // 1950\n        c = {};                                                                                                        // 1951\n        c._isAMomentObject = true;                                                                                     // 1952\n        c._useUTC = true;                                                                                              // 1953\n        c._isUTC = true;                                                                                               // 1954\n        c._l = locale;                                                                                                 // 1955\n        c._i = input;                                                                                                  // 1956\n        c._f = format;                                                                                                 // 1957\n        c._strict = strict;                                                                                            // 1958\n        c._pf = defaultParsingFlags();                                                                                 // 1959\n                                                                                                                       // 1960\n        return makeMoment(c).utc();                                                                                    // 1961\n    };                                                                                                                 // 1962\n                                                                                                                       // 1963\n    // creating with unix timestamp (in seconds)                                                                       // 1964\n    moment.unix = function (input) {                                                                                   // 1965\n        return moment(input * 1000);                                                                                   // 1966\n    };                                                                                                                 // 1967\n                                                                                                                       // 1968\n    // duration                                                                                                        // 1969\n    moment.duration = function (input, key) {                                                                          // 1970\n        var duration = input,                                                                                          // 1971\n            // matching against regexp is expensive, do it on demand                                                   // 1972\n            match = null,                                                                                              // 1973\n            sign,                                                                                                      // 1974\n            ret,                                                                                                       // 1975\n            parseIso,                                                                                                  // 1976\n            diffRes;                                                                                                   // 1977\n                                                                                                                       // 1978\n        if (moment.isDuration(input)) {                                                                                // 1979\n            duration = {                                                                                               // 1980\n                ms: input._milliseconds,                                                                               // 1981\n                d: input._days,                                                                                        // 1982\n                M: input._months                                                                                       // 1983\n            };                                                                                                         // 1984\n        } else if (typeof input === 'number') {                                                                        // 1985\n            duration = {};                                                                                             // 1986\n            if (key) {                                                                                                 // 1987\n                duration[key] = input;                                                                                 // 1988\n            } else {                                                                                                   // 1989\n                duration.milliseconds = input;                                                                         // 1990\n            }                                                                                                          // 1991\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {                                                  // 1992\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1993\n            duration = {                                                                                               // 1994\n                y: 0,                                                                                                  // 1995\n                d: toInt(match[DATE]) * sign,                                                                          // 1996\n                h: toInt(match[HOUR]) * sign,                                                                          // 1997\n                m: toInt(match[MINUTE]) * sign,                                                                        // 1998\n                s: toInt(match[SECOND]) * sign,                                                                        // 1999\n                ms: toInt(match[MILLISECOND]) * sign                                                                   // 2000\n            };                                                                                                         // 2001\n        } else if (!!(match = isoDurationRegex.exec(input))) {                                                         // 2002\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 2003\n            parseIso = function (inp) {                                                                                // 2004\n                // We'd normally use ~~inp for this, but unfortunately it also                                         // 2005\n                // converts floats to ints.                                                                            // 2006\n                // inp may be undefined, so careful calling replace on it.                                             // 2007\n                var res = inp && parseFloat(inp.replace(',', '.'));                                                    // 2008\n                // apply sign while we're at it                                                                        // 2009\n                return (isNaN(res) ? 0 : res) * sign;                                                                  // 2010\n            };                                                                                                         // 2011\n            duration = {                                                                                               // 2012\n                y: parseIso(match[2]),                                                                                 // 2013\n                M: parseIso(match[3]),                                                                                 // 2014\n                d: parseIso(match[4]),                                                                                 // 2015\n                h: parseIso(match[5]),                                                                                 // 2016\n                m: parseIso(match[6]),                                                                                 // 2017\n                s: parseIso(match[7]),                                                                                 // 2018\n                w: parseIso(match[8])                                                                                  // 2019\n            };                                                                                                         // 2020\n        } else if (duration == null) {// checks for null or undefined                                                  // 2021\n            duration = {};                                                                                             // 2022\n        } else if (typeof duration === 'object' &&                                                                     // 2023\n                ('from' in duration || 'to' in duration)) {                                                            // 2024\n            diffRes = momentsDifference(moment(duration.from), moment(duration.to));                                   // 2025\n                                                                                                                       // 2026\n            duration = {};                                                                                             // 2027\n            duration.ms = diffRes.milliseconds;                                                                        // 2028\n            duration.M = diffRes.months;                                                                               // 2029\n        }                                                                                                              // 2030\n                                                                                                                       // 2031\n        ret = new Duration(duration);                                                                                  // 2032\n                                                                                                                       // 2033\n        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {                                                // 2034\n            ret._locale = input._locale;                                                                               // 2035\n        }                                                                                                              // 2036\n                                                                                                                       // 2037\n        return ret;                                                                                                    // 2038\n    };                                                                                                                 // 2039\n                                                                                                                       // 2040\n    // version number                                                                                                  // 2041\n    moment.version = VERSION;                                                                                          // 2042\n                                                                                                                       // 2043\n    // default format                                                                                                  // 2044\n    moment.defaultFormat = isoFormat;                                                                                  // 2045\n                                                                                                                       // 2046\n    // constant that refers to the ISO standard                                                                        // 2047\n    moment.ISO_8601 = function () {};                                                                                  // 2048\n                                                                                                                       // 2049\n    // Plugins that add properties should also add the key here (null value),                                          // 2050\n    // so we can properly clone ourselves.                                                                             // 2051\n    moment.momentProperties = momentProperties;                                                                        // 2052\n                                                                                                                       // 2053\n    // This function will be called whenever a moment is mutated.                                                      // 2054\n    // It is intended to keep the offset in sync with the timezone.                                                    // 2055\n    moment.updateOffset = function () {};                                                                              // 2056\n                                                                                                                       // 2057\n    // This function allows you to set a threshold for relative time strings                                           // 2058\n    moment.relativeTimeThreshold = function (threshold, limit) {                                                       // 2059\n        if (relativeTimeThresholds[threshold] === undefined) {                                                         // 2060\n            return false;                                                                                              // 2061\n        }                                                                                                              // 2062\n        if (limit === undefined) {                                                                                     // 2063\n            return relativeTimeThresholds[threshold];                                                                  // 2064\n        }                                                                                                              // 2065\n        relativeTimeThresholds[threshold] = limit;                                                                     // 2066\n        return true;                                                                                                   // 2067\n    };                                                                                                                 // 2068\n                                                                                                                       // 2069\n    moment.lang = deprecate(                                                                                           // 2070\n        'moment.lang is deprecated. Use moment.locale instead.',                                                       // 2071\n        function (key, value) {                                                                                        // 2072\n            return moment.locale(key, value);                                                                          // 2073\n        }                                                                                                              // 2074\n    );                                                                                                                 // 2075\n                                                                                                                       // 2076\n    // This function will load locale and then set the global locale.  If                                              // 2077\n    // no arguments are passed in, it will simply return the current global                                            // 2078\n    // locale key.                                                                                                     // 2079\n    moment.locale = function (key, values) {                                                                           // 2080\n        var data;                                                                                                      // 2081\n        if (key) {                                                                                                     // 2082\n            if (typeof(values) !== 'undefined') {                                                                      // 2083\n                data = moment.defineLocale(key, values);                                                               // 2084\n            }                                                                                                          // 2085\n            else {                                                                                                     // 2086\n                data = moment.localeData(key);                                                                         // 2087\n            }                                                                                                          // 2088\n                                                                                                                       // 2089\n            if (data) {                                                                                                // 2090\n                moment.duration._locale = moment._locale = data;                                                       // 2091\n            }                                                                                                          // 2092\n        }                                                                                                              // 2093\n                                                                                                                       // 2094\n        return moment._locale._abbr;                                                                                   // 2095\n    };                                                                                                                 // 2096\n                                                                                                                       // 2097\n    moment.defineLocale = function (name, values) {                                                                    // 2098\n        if (values !== null) {                                                                                         // 2099\n            values.abbr = name;                                                                                        // 2100\n            if (!locales[name]) {                                                                                      // 2101\n                locales[name] = new Locale();                                                                          // 2102\n            }                                                                                                          // 2103\n            locales[name].set(values);                                                                                 // 2104\n                                                                                                                       // 2105\n            // backwards compat for now: also set the locale                                                           // 2106\n            moment.locale(name);                                                                                       // 2107\n                                                                                                                       // 2108\n            return locales[name];                                                                                      // 2109\n        } else {                                                                                                       // 2110\n            // useful for testing                                                                                      // 2111\n            delete locales[name];                                                                                      // 2112\n            return null;                                                                                               // 2113\n        }                                                                                                              // 2114\n    };                                                                                                                 // 2115\n                                                                                                                       // 2116\n    moment.langData = deprecate(                                                                                       // 2117\n        'moment.langData is deprecated. Use moment.localeData instead.',                                               // 2118\n        function (key) {                                                                                               // 2119\n            return moment.localeData(key);                                                                             // 2120\n        }                                                                                                              // 2121\n    );                                                                                                                 // 2122\n                                                                                                                       // 2123\n    // returns locale data                                                                                             // 2124\n    moment.localeData = function (key) {                                                                               // 2125\n        var locale;                                                                                                    // 2126\n                                                                                                                       // 2127\n        if (key && key._locale && key._locale._abbr) {                                                                 // 2128\n            key = key._locale._abbr;                                                                                   // 2129\n        }                                                                                                              // 2130\n                                                                                                                       // 2131\n        if (!key) {                                                                                                    // 2132\n            return moment._locale;                                                                                     // 2133\n        }                                                                                                              // 2134\n                                                                                                                       // 2135\n        if (!isArray(key)) {                                                                                           // 2136\n            //short-circuit everything else                                                                            // 2137\n            locale = loadLocale(key);                                                                                  // 2138\n            if (locale) {                                                                                              // 2139\n                return locale;                                                                                         // 2140\n            }                                                                                                          // 2141\n            key = [key];                                                                                               // 2142\n        }                                                                                                              // 2143\n                                                                                                                       // 2144\n        return chooseLocale(key);                                                                                      // 2145\n    };                                                                                                                 // 2146\n                                                                                                                       // 2147\n    // compare moment object                                                                                           // 2148\n    moment.isMoment = function (obj) {                                                                                 // 2149\n        return obj instanceof Moment ||                                                                                // 2150\n            (obj != null && hasOwnProp(obj, '_isAMomentObject'));                                                      // 2151\n    };                                                                                                                 // 2152\n                                                                                                                       // 2153\n    // for typechecking Duration objects                                                                               // 2154\n    moment.isDuration = function (obj) {                                                                               // 2155\n        return obj instanceof Duration;                                                                                // 2156\n    };                                                                                                                 // 2157\n                                                                                                                       // 2158\n    for (i = lists.length - 1; i >= 0; --i) {                                                                          // 2159\n        makeList(lists[i]);                                                                                            // 2160\n    }                                                                                                                  // 2161\n                                                                                                                       // 2162\n    moment.normalizeUnits = function (units) {                                                                         // 2163\n        return normalizeUnits(units);                                                                                  // 2164\n    };                                                                                                                 // 2165\n                                                                                                                       // 2166\n    moment.invalid = function (flags) {                                                                                // 2167\n        var m = moment.utc(NaN);                                                                                       // 2168\n        if (flags != null) {                                                                                           // 2169\n            extend(m._pf, flags);                                                                                      // 2170\n        }                                                                                                              // 2171\n        else {                                                                                                         // 2172\n            m._pf.userInvalidated = true;                                                                              // 2173\n        }                                                                                                              // 2174\n                                                                                                                       // 2175\n        return m;                                                                                                      // 2176\n    };                                                                                                                 // 2177\n                                                                                                                       // 2178\n    moment.parseZone = function () {                                                                                   // 2179\n        return moment.apply(null, arguments).parseZone();                                                              // 2180\n    };                                                                                                                 // 2181\n                                                                                                                       // 2182\n    moment.parseTwoDigitYear = function (input) {                                                                      // 2183\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 2184\n    };                                                                                                                 // 2185\n                                                                                                                       // 2186\n    moment.isDate = isDate;                                                                                            // 2187\n                                                                                                                       // 2188\n    /************************************                                                                              // 2189\n        Moment Prototype                                                                                               // 2190\n    ************************************/                                                                              // 2191\n                                                                                                                       // 2192\n                                                                                                                       // 2193\n    extend(moment.fn = Moment.prototype, {                                                                             // 2194\n                                                                                                                       // 2195\n        clone : function () {                                                                                          // 2196\n            return moment(this);                                                                                       // 2197\n        },                                                                                                             // 2198\n                                                                                                                       // 2199\n        valueOf : function () {                                                                                        // 2200\n            return +this._d - ((this._offset || 0) * 60000);                                                           // 2201\n        },                                                                                                             // 2202\n                                                                                                                       // 2203\n        unix : function () {                                                                                           // 2204\n            return Math.floor(+this / 1000);                                                                           // 2205\n        },                                                                                                             // 2206\n                                                                                                                       // 2207\n        toString : function () {                                                                                       // 2208\n            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                               // 2209\n        },                                                                                                             // 2210\n                                                                                                                       // 2211\n        toDate : function () {                                                                                         // 2212\n            return this._offset ? new Date(+this) : this._d;                                                           // 2213\n        },                                                                                                             // 2214\n                                                                                                                       // 2215\n        toISOString : function () {                                                                                    // 2216\n            var m = moment(this).utc();                                                                                // 2217\n            if (0 < m.year() && m.year() <= 9999) {                                                                    // 2218\n                if ('function' === typeof Date.prototype.toISOString) {                                                // 2219\n                    // native implementation is ~50x faster, use it when we can                                        // 2220\n                    return this.toDate().toISOString();                                                                // 2221\n                } else {                                                                                               // 2222\n                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                            // 2223\n                }                                                                                                      // 2224\n            } else {                                                                                                   // 2225\n                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                              // 2226\n            }                                                                                                          // 2227\n        },                                                                                                             // 2228\n                                                                                                                       // 2229\n        toArray : function () {                                                                                        // 2230\n            var m = this;                                                                                              // 2231\n            return [                                                                                                   // 2232\n                m.year(),                                                                                              // 2233\n                m.month(),                                                                                             // 2234\n                m.date(),                                                                                              // 2235\n                m.hours(),                                                                                             // 2236\n                m.minutes(),                                                                                           // 2237\n                m.seconds(),                                                                                           // 2238\n                m.milliseconds()                                                                                       // 2239\n            ];                                                                                                         // 2240\n        },                                                                                                             // 2241\n                                                                                                                       // 2242\n        isValid : function () {                                                                                        // 2243\n            return isValid(this);                                                                                      // 2244\n        },                                                                                                             // 2245\n                                                                                                                       // 2246\n        isDSTShifted : function () {                                                                                   // 2247\n            if (this._a) {                                                                                             // 2248\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }                                                                                                          // 2250\n                                                                                                                       // 2251\n            return false;                                                                                              // 2252\n        },                                                                                                             // 2253\n                                                                                                                       // 2254\n        parsingFlags : function () {                                                                                   // 2255\n            return extend({}, this._pf);                                                                               // 2256\n        },                                                                                                             // 2257\n                                                                                                                       // 2258\n        invalidAt: function () {                                                                                       // 2259\n            return this._pf.overflow;                                                                                  // 2260\n        },                                                                                                             // 2261\n                                                                                                                       // 2262\n        utc : function (keepLocalTime) {                                                                               // 2263\n            return this.utcOffset(0, keepLocalTime);                                                                   // 2264\n        },                                                                                                             // 2265\n                                                                                                                       // 2266\n        local : function (keepLocalTime) {                                                                             // 2267\n            if (this._isUTC) {                                                                                         // 2268\n                this.utcOffset(0, keepLocalTime);                                                                      // 2269\n                this._isUTC = false;                                                                                   // 2270\n                                                                                                                       // 2271\n                if (keepLocalTime) {                                                                                   // 2272\n                    this.subtract(this._dateUtcOffset(), 'm');                                                         // 2273\n                }                                                                                                      // 2274\n            }                                                                                                          // 2275\n            return this;                                                                                               // 2276\n        },                                                                                                             // 2277\n                                                                                                                       // 2278\n        format : function (inputString) {                                                                              // 2279\n            var output = formatMoment(this, inputString || moment.defaultFormat);                                      // 2280\n            return this.localeData().postformat(output);                                                               // 2281\n        },                                                                                                             // 2282\n                                                                                                                       // 2283\n        add : createAdder(1, 'add'),                                                                                   // 2284\n                                                                                                                       // 2285\n        subtract : createAdder(-1, 'subtract'),                                                                        // 2286\n                                                                                                                       // 2287\n        diff : function (input, units, asFloat) {                                                                      // 2288\n            var that = makeAs(input, this),                                                                            // 2289\n                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,                                                // 2290\n                anchor, diff, output, daysAdjust;                                                                      // 2291\n                                                                                                                       // 2292\n            units = normalizeUnits(units);                                                                             // 2293\n                                                                                                                       // 2294\n            if (units === 'year' || units === 'month' || units === 'quarter') {                                        // 2295\n                output = monthDiff(this, that);                                                                        // 2296\n                if (units === 'quarter') {                                                                             // 2297\n                    output = output / 3;                                                                               // 2298\n                } else if (units === 'year') {                                                                         // 2299\n                    output = output / 12;                                                                              // 2300\n                }                                                                                                      // 2301\n            } else {                                                                                                   // 2302\n                diff = this - that;                                                                                    // 2303\n                output = units === 'second' ? diff / 1e3 : // 1000                                                     // 2304\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60                                                     // 2305\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60                                                 // 2306\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                   // 2307\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst             // 2308\n                    diff;                                                                                              // 2309\n            }                                                                                                          // 2310\n            return asFloat ? output : absRound(output);                                                                // 2311\n        },                                                                                                             // 2312\n                                                                                                                       // 2313\n        from : function (time, withoutSuffix) {                                                                        // 2314\n            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);             // 2315\n        },                                                                                                             // 2316\n                                                                                                                       // 2317\n        fromNow : function (withoutSuffix) {                                                                           // 2318\n            return this.from(moment(), withoutSuffix);                                                                 // 2319\n        },                                                                                                             // 2320\n                                                                                                                       // 2321\n        calendar : function (time) {                                                                                   // 2322\n            // We want to compare the start of today, vs this.                                                         // 2323\n            // Getting start-of-today depends on whether we're locat/utc/offset                                        // 2324\n            // or not.                                                                                                 // 2325\n            var now = time || moment(),                                                                                // 2326\n                sod = makeAs(now, this).startOf('day'),                                                                // 2327\n                diff = this.diff(sod, 'days', true),                                                                   // 2328\n                format = diff < -6 ? 'sameElse' :                                                                      // 2329\n                    diff < -1 ? 'lastWeek' :                                                                           // 2330\n                    diff < 0 ? 'lastDay' :                                                                             // 2331\n                    diff < 1 ? 'sameDay' :                                                                             // 2332\n                    diff < 2 ? 'nextDay' :                                                                             // 2333\n                    diff < 7 ? 'nextWeek' : 'sameElse';                                                                // 2334\n            return this.format(this.localeData().calendar(format, this, moment(now)));                                 // 2335\n        },                                                                                                             // 2336\n                                                                                                                       // 2337\n        isLeapYear : function () {                                                                                     // 2338\n            return isLeapYear(this.year());                                                                            // 2339\n        },                                                                                                             // 2340\n                                                                                                                       // 2341\n        isDST : function () {                                                                                          // 2342\n            return (this.utcOffset() > this.clone().month(0).utcOffset() ||                                            // 2343\n                this.utcOffset() > this.clone().month(5).utcOffset());                                                 // 2344\n        },                                                                                                             // 2345\n                                                                                                                       // 2346\n        day : function (input) {                                                                                       // 2347\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                            // 2348\n            if (input != null) {                                                                                       // 2349\n                input = parseWeekday(input, this.localeData());                                                        // 2350\n                return this.add(input - day, 'd');                                                                     // 2351\n            } else {                                                                                                   // 2352\n                return day;                                                                                            // 2353\n            }                                                                                                          // 2354\n        },                                                                                                             // 2355\n                                                                                                                       // 2356\n        month : makeAccessor('Month', true),                                                                           // 2357\n                                                                                                                       // 2358\n        startOf : function (units) {                                                                                   // 2359\n            units = normalizeUnits(units);                                                                             // 2360\n            // the following switch intentionally omits break keywords                                                 // 2361\n            // to utilize falling through the cases.                                                                   // 2362\n            switch (units) {                                                                                           // 2363\n            case 'year':                                                                                               // 2364\n                this.month(0);                                                                                         // 2365\n                /* falls through */                                                                                    // 2366\n            case 'quarter':                                                                                            // 2367\n            case 'month':                                                                                              // 2368\n                this.date(1);                                                                                          // 2369\n                /* falls through */                                                                                    // 2370\n            case 'week':                                                                                               // 2371\n            case 'isoWeek':                                                                                            // 2372\n            case 'day':                                                                                                // 2373\n                this.hours(0);                                                                                         // 2374\n                /* falls through */                                                                                    // 2375\n            case 'hour':                                                                                               // 2376\n                this.minutes(0);                                                                                       // 2377\n                /* falls through */                                                                                    // 2378\n            case 'minute':                                                                                             // 2379\n                this.seconds(0);                                                                                       // 2380\n                /* falls through */                                                                                    // 2381\n            case 'second':                                                                                             // 2382\n                this.milliseconds(0);                                                                                  // 2383\n                /* falls through */                                                                                    // 2384\n            }                                                                                                          // 2385\n                                                                                                                       // 2386\n            // weeks are a special case                                                                                // 2387\n            if (units === 'week') {                                                                                    // 2388\n                this.weekday(0);                                                                                       // 2389\n            } else if (units === 'isoWeek') {                                                                          // 2390\n                this.isoWeekday(1);                                                                                    // 2391\n            }                                                                                                          // 2392\n                                                                                                                       // 2393\n            // quarters are also special                                                                               // 2394\n            if (units === 'quarter') {                                                                                 // 2395\n                this.month(Math.floor(this.month() / 3) * 3);                                                          // 2396\n            }                                                                                                          // 2397\n                                                                                                                       // 2398\n            return this;                                                                                               // 2399\n        },                                                                                                             // 2400\n                                                                                                                       // 2401\n        endOf: function (units) {                                                                                      // 2402\n            units = normalizeUnits(units);                                                                             // 2403\n            if (units === undefined || units === 'millisecond') {                                                      // 2404\n                return this;                                                                                           // 2405\n            }                                                                                                          // 2406\n            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');               // 2407\n        },                                                                                                             // 2408\n                                                                                                                       // 2409\n        isAfter: function (input, units) {                                                                             // 2410\n            var inputMs;                                                                                               // 2411\n            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                              // 2412\n            if (units === 'millisecond') {                                                                             // 2413\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2414\n                return +this > +input;                                                                                 // 2415\n            } else {                                                                                                   // 2416\n                inputMs = moment.isMoment(input) ? +input : +moment(input);                                            // 2417\n                return inputMs < +this.clone().startOf(units);                                                         // 2418\n            }                                                                                                          // 2419\n        },                                                                                                             // 2420\n                                                                                                                       // 2421\n        isBefore: function (input, units) {                                                                            // 2422\n            var inputMs;                                                                                               // 2423\n            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                              // 2424\n            if (units === 'millisecond') {                                                                             // 2425\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2426\n                return +this < +input;                                                                                 // 2427\n            } else {                                                                                                   // 2428\n                inputMs = moment.isMoment(input) ? +input : +moment(input);                                            // 2429\n                return +this.clone().endOf(units) < inputMs;                                                           // 2430\n            }                                                                                                          // 2431\n        },                                                                                                             // 2432\n                                                                                                                       // 2433\n        isBetween: function (from, to, units) {                                                                        // 2434\n            return this.isAfter(from, units) && this.isBefore(to, units);                                              // 2435\n        },                                                                                                             // 2436\n                                                                                                                       // 2437\n        isSame: function (input, units) {                                                                              // 2438\n            var inputMs;                                                                                               // 2439\n            units = normalizeUnits(units || 'millisecond');                                                            // 2440\n            if (units === 'millisecond') {                                                                             // 2441\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2442\n                return +this === +input;                                                                               // 2443\n            } else {                                                                                                   // 2444\n                inputMs = +moment(input);                                                                              // 2445\n                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));           // 2446\n            }                                                                                                          // 2447\n        },                                                                                                             // 2448\n                                                                                                                       // 2449\n        min: deprecate(                                                                                                // 2450\n                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',   // 2451\n                 function (other) {                                                                                    // 2452\n                     other = moment.apply(null, arguments);                                                            // 2453\n                     return other < this ? this : other;                                                               // 2454\n                 }                                                                                                     // 2455\n         ),                                                                                                            // 2456\n                                                                                                                       // 2457\n        max: deprecate(                                                                                                // 2458\n                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',    // 2459\n                function (other) {                                                                                     // 2460\n                    other = moment.apply(null, arguments);                                                             // 2461\n                    return other > this ? this : other;                                                                // 2462\n                }                                                                                                      // 2463\n        ),                                                                                                             // 2464\n                                                                                                                       // 2465\n        zone : deprecate(                                                                                              // 2466\n                'moment().zone is deprecated, use moment().utcOffset instead. ' +                                      // 2467\n                'https://github.com/moment/moment/issues/1779',                                                        // 2468\n                function (input, keepLocalTime) {                                                                      // 2469\n                    if (input != null) {                                                                               // 2470\n                        if (typeof input !== 'string') {                                                               // 2471\n                            input = -input;                                                                            // 2472\n                        }                                                                                              // 2473\n                                                                                                                       // 2474\n                        this.utcOffset(input, keepLocalTime);                                                          // 2475\n                                                                                                                       // 2476\n                        return this;                                                                                   // 2477\n                    } else {                                                                                           // 2478\n                        return -this.utcOffset();                                                                      // 2479\n                    }                                                                                                  // 2480\n                }                                                                                                      // 2481\n        ),                                                                                                             // 2482\n                                                                                                                       // 2483\n        // keepLocalTime = true means only change the timezone, without                                                // 2484\n        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                        // 2485\n        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                         // 2486\n        // +0200, so we adjust the time as needed, to be valid.                                                        // 2487\n        //                                                                                                             // 2488\n        // Keeping the time actually adds/subtracts (one hour)                                                         // 2489\n        // from the actual represented time. That is why we call updateOffset                                          // 2490\n        // a second time. In case it wants us to change the offset again                                               // 2491\n        // _changeInProgress == true case, then we have to adjust, because                                             // 2492\n        // there is no such time in the given timezone.                                                                // 2493\n        utcOffset : function (input, keepLocalTime) {                                                                  // 2494\n            var offset = this._offset || 0,                                                                            // 2495\n                localAdjust;                                                                                           // 2496\n            if (input != null) {                                                                                       // 2497\n                if (typeof input === 'string') {                                                                       // 2498\n                    input = utcOffsetFromString(input);                                                                // 2499\n                }                                                                                                      // 2500\n                if (Math.abs(input) < 16) {                                                                            // 2501\n                    input = input * 60;                                                                                // 2502\n                }                                                                                                      // 2503\n                if (!this._isUTC && keepLocalTime) {                                                                   // 2504\n                    localAdjust = this._dateUtcOffset();                                                               // 2505\n                }                                                                                                      // 2506\n                this._offset = input;                                                                                  // 2507\n                this._isUTC = true;                                                                                    // 2508\n                if (localAdjust != null) {                                                                             // 2509\n                    this.add(localAdjust, 'm');                                                                        // 2510\n                }                                                                                                      // 2511\n                if (offset !== input) {                                                                                // 2512\n                    if (!keepLocalTime || this._changeInProgress) {                                                    // 2513\n                        addOrSubtractDurationFromMoment(this,                                                          // 2514\n                                moment.duration(input - offset, 'm'), 1, false);                                       // 2515\n                    } else if (!this._changeInProgress) {                                                              // 2516\n                        this._changeInProgress = true;                                                                 // 2517\n                        moment.updateOffset(this, true);                                                               // 2518\n                        this._changeInProgress = null;                                                                 // 2519\n                    }                                                                                                  // 2520\n                }                                                                                                      // 2521\n                                                                                                                       // 2522\n                return this;                                                                                           // 2523\n            } else {                                                                                                   // 2524\n                return this._isUTC ? offset : this._dateUtcOffset();                                                   // 2525\n            }                                                                                                          // 2526\n        },                                                                                                             // 2527\n                                                                                                                       // 2528\n        isLocal : function () {                                                                                        // 2529\n            return !this._isUTC;                                                                                       // 2530\n        },                                                                                                             // 2531\n                                                                                                                       // 2532\n        isUtcOffset : function () {                                                                                    // 2533\n            return this._isUTC;                                                                                        // 2534\n        },                                                                                                             // 2535\n                                                                                                                       // 2536\n        isUtc : function () {                                                                                          // 2537\n            return this._isUTC && this._offset === 0;                                                                  // 2538\n        },                                                                                                             // 2539\n                                                                                                                       // 2540\n        zoneAbbr : function () {                                                                                       // 2541\n            return this._isUTC ? 'UTC' : '';                                                                           // 2542\n        },                                                                                                             // 2543\n                                                                                                                       // 2544\n        zoneName : function () {                                                                                       // 2545\n            return this._isUTC ? 'Coordinated Universal Time' : '';                                                    // 2546\n        },                                                                                                             // 2547\n                                                                                                                       // 2548\n        parseZone : function () {                                                                                      // 2549\n            if (this._tzm) {                                                                                           // 2550\n                this.utcOffset(this._tzm);                                                                             // 2551\n            } else if (typeof this._i === 'string') {                                                                  // 2552\n                this.utcOffset(utcOffsetFromString(this._i));                                                          // 2553\n            }                                                                                                          // 2554\n            return this;                                                                                               // 2555\n        },                                                                                                             // 2556\n                                                                                                                       // 2557\n        hasAlignedHourOffset : function (input) {                                                                      // 2558\n            if (!input) {                                                                                              // 2559\n                input = 0;                                                                                             // 2560\n            }                                                                                                          // 2561\n            else {                                                                                                     // 2562\n                input = moment(input).utcOffset();                                                                     // 2563\n            }                                                                                                          // 2564\n                                                                                                                       // 2565\n            return (this.utcOffset() - input) % 60 === 0;                                                              // 2566\n        },                                                                                                             // 2567\n                                                                                                                       // 2568\n        daysInMonth : function () {                                                                                    // 2569\n            return daysInMonth(this.year(), this.month());                                                             // 2570\n        },                                                                                                             // 2571\n                                                                                                                       // 2572\n        dayOfYear : function (input) {                                                                                 // 2573\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;           // 2574\n            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                     // 2575\n        },                                                                                                             // 2576\n                                                                                                                       // 2577\n        quarter : function (input) {                                                                                   // 2578\n            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3); // 2579\n        },                                                                                                             // 2580\n                                                                                                                       // 2581\n        weekYear : function (input) {                                                                                  // 2582\n            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;                // 2583\n            return input == null ? year : this.add((input - year), 'y');                                               // 2584\n        },                                                                                                             // 2585\n                                                                                                                       // 2586\n        isoWeekYear : function (input) {                                                                               // 2587\n            var year = weekOfYear(this, 1, 4).year;                                                                    // 2588\n            return input == null ? year : this.add((input - year), 'y');                                               // 2589\n        },                                                                                                             // 2590\n                                                                                                                       // 2591\n        week : function (input) {                                                                                      // 2592\n            var week = this.localeData().week(this);                                                                   // 2593\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2594\n        },                                                                                                             // 2595\n                                                                                                                       // 2596\n        isoWeek : function (input) {                                                                                   // 2597\n            var week = weekOfYear(this, 1, 4).week;                                                                    // 2598\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2599\n        },                                                                                                             // 2600\n                                                                                                                       // 2601\n        weekday : function (input) {                                                                                   // 2602\n            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                          // 2603\n            return input == null ? weekday : this.add(input - weekday, 'd');                                           // 2604\n        },                                                                                                             // 2605\n                                                                                                                       // 2606\n        isoWeekday : function (input) {                                                                                // 2607\n            // behaves the same as moment#day except                                                                   // 2608\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                          // 2609\n            // as a setter, sunday should belong to the previous week.                                                 // 2610\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                     // 2611\n        },                                                                                                             // 2612\n                                                                                                                       // 2613\n        isoWeeksInYear : function () {                                                                                 // 2614\n            return weeksInYear(this.year(), 1, 4);                                                                     // 2615\n        },                                                                                                             // 2616\n                                                                                                                       // 2617\n        weeksInYear : function () {                                                                                    // 2618\n            var weekInfo = this.localeData()._week;                                                                    // 2619\n            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                               // 2620\n        },                                                                                                             // 2621\n                                                                                                                       // 2622\n        get : function (units) {                                                                                       // 2623\n            units = normalizeUnits(units);                                                                             // 2624\n            return this[units]();                                                                                      // 2625\n        },                                                                                                             // 2626\n                                                                                                                       // 2627\n        set : function (units, value) {                                                                                // 2628\n            var unit;                                                                                                  // 2629\n            if (typeof units === 'object') {                                                                           // 2630\n                for (unit in units) {                                                                                  // 2631\n                    this.set(unit, units[unit]);                                                                       // 2632\n                }                                                                                                      // 2633\n            }                                                                                                          // 2634\n            else {                                                                                                     // 2635\n                units = normalizeUnits(units);                                                                         // 2636\n                if (typeof this[units] === 'function') {                                                               // 2637\n                    this[units](value);                                                                                // 2638\n                }                                                                                                      // 2639\n            }                                                                                                          // 2640\n            return this;                                                                                               // 2641\n        },                                                                                                             // 2642\n                                                                                                                       // 2643\n        // If passed a locale key, it will set the locale for this                                                     // 2644\n        // instance.  Otherwise, it will return the locale configuration                                               // 2645\n        // variables for this instance.                                                                                // 2646\n        locale : function (key) {                                                                                      // 2647\n            var newLocaleData;                                                                                         // 2648\n                                                                                                                       // 2649\n            if (key === undefined) {                                                                                   // 2650\n                return this._locale._abbr;                                                                             // 2651\n            } else {                                                                                                   // 2652\n                newLocaleData = moment.localeData(key);                                                                // 2653\n                if (newLocaleData != null) {                                                                           // 2654\n                    this._locale = newLocaleData;                                                                      // 2655\n                }                                                                                                      // 2656\n                return this;                                                                                           // 2657\n            }                                                                                                          // 2658\n        },                                                                                                             // 2659\n                                                                                                                       // 2660\n        lang : deprecate(                                                                                              // 2661\n            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n            function (key) {                                                                                           // 2663\n                if (key === undefined) {                                                                               // 2664\n                    return this.localeData();                                                                          // 2665\n                } else {                                                                                               // 2666\n                    return this.locale(key);                                                                           // 2667\n                }                                                                                                      // 2668\n            }                                                                                                          // 2669\n        ),                                                                                                             // 2670\n                                                                                                                       // 2671\n        localeData : function () {                                                                                     // 2672\n            return this._locale;                                                                                       // 2673\n        },                                                                                                             // 2674\n                                                                                                                       // 2675\n        _dateUtcOffset : function () {                                                                                 // 2676\n            // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                          // 2677\n            // https://github.com/moment/moment/pull/1871                                                              // 2678\n            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;                                                 // 2679\n        }                                                                                                              // 2680\n                                                                                                                       // 2681\n    });                                                                                                                // 2682\n                                                                                                                       // 2683\n    function rawMonthSetter(mom, value) {                                                                              // 2684\n        var dayOfMonth;                                                                                                // 2685\n                                                                                                                       // 2686\n        // TODO: Move this out of here!                                                                                // 2687\n        if (typeof value === 'string') {                                                                               // 2688\n            value = mom.localeData().monthsParse(value);                                                               // 2689\n            // TODO: Another silent failure?                                                                           // 2690\n            if (typeof value !== 'number') {                                                                           // 2691\n                return mom;                                                                                            // 2692\n            }                                                                                                          // 2693\n        }                                                                                                              // 2694\n                                                                                                                       // 2695\n        dayOfMonth = Math.min(mom.date(),                                                                              // 2696\n                daysInMonth(mom.year(), value));                                                                       // 2697\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 2698\n        return mom;                                                                                                    // 2699\n    }                                                                                                                  // 2700\n                                                                                                                       // 2701\n    function rawGetter(mom, unit) {                                                                                    // 2702\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();                                                     // 2703\n    }                                                                                                                  // 2704\n                                                                                                                       // 2705\n    function rawSetter(mom, unit, value) {                                                                             // 2706\n        if (unit === 'Month') {                                                                                        // 2707\n            return rawMonthSetter(mom, value);                                                                         // 2708\n        } else {                                                                                                       // 2709\n            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                            // 2710\n        }                                                                                                              // 2711\n    }                                                                                                                  // 2712\n                                                                                                                       // 2713\n    function makeAccessor(unit, keepTime) {                                                                            // 2714\n        return function (value) {                                                                                      // 2715\n            if (value != null) {                                                                                       // 2716\n                rawSetter(this, unit, value);                                                                          // 2717\n                moment.updateOffset(this, keepTime);                                                                   // 2718\n                return this;                                                                                           // 2719\n            } else {                                                                                                   // 2720\n                return rawGetter(this, unit);                                                                          // 2721\n            }                                                                                                          // 2722\n        };                                                                                                             // 2723\n    }                                                                                                                  // 2724\n                                                                                                                       // 2725\n    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);                              // 2726\n    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);                                             // 2727\n    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);                                             // 2728\n    // Setting the hour should keep the time, because the user explicitly                                              // 2729\n    // specified which hour he wants. So trying to maintain the same hour (in                                          // 2730\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 2731\n    // this rule.                                                                                                      // 2732\n    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);                                                    // 2733\n    // moment.fn.month is defined separately                                                                           // 2734\n    moment.fn.date = makeAccessor('Date', true);                                                                       // 2735\n    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));        // 2736\n    moment.fn.year = makeAccessor('FullYear', true);                                                                   // 2737\n    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));    // 2738\n                                                                                                                       // 2739\n    // add plural methods                                                                                              // 2740\n    moment.fn.days = moment.fn.day;                                                                                    // 2741\n    moment.fn.months = moment.fn.month;                                                                                // 2742\n    moment.fn.weeks = moment.fn.week;                                                                                  // 2743\n    moment.fn.isoWeeks = moment.fn.isoWeek;                                                                            // 2744\n    moment.fn.quarters = moment.fn.quarter;                                                                            // 2745\n                                                                                                                       // 2746\n    // add aliased format methods                                                                                      // 2747\n    moment.fn.toJSON = moment.fn.toISOString;                                                                          // 2748\n                                                                                                                       // 2749\n    // alias isUtc for dev-friendliness                                                                                // 2750\n    moment.fn.isUTC = moment.fn.isUtc;                                                                                 // 2751\n                                                                                                                       // 2752\n    /************************************                                                                              // 2753\n        Duration Prototype                                                                                             // 2754\n    ************************************/                                                                              // 2755\n                                                                                                                       // 2756\n                                                                                                                       // 2757\n    function daysToYears (days) {                                                                                      // 2758\n        // 400 years have 146097 days (taking into account leap year rules)                                            // 2759\n        return days * 400 / 146097;                                                                                    // 2760\n    }                                                                                                                  // 2761\n                                                                                                                       // 2762\n    function yearsToDays (years) {                                                                                     // 2763\n        // years * 365 + absRound(years / 4) -                                                                         // 2764\n        //     absRound(years / 100) + absRound(years / 400);                                                          // 2765\n        return years * 146097 / 400;                                                                                   // 2766\n    }                                                                                                                  // 2767\n                                                                                                                       // 2768\n    extend(moment.duration.fn = Duration.prototype, {                                                                  // 2769\n                                                                                                                       // 2770\n        _bubble : function () {                                                                                        // 2771\n            var milliseconds = this._milliseconds,                                                                     // 2772\n                days = this._days,                                                                                     // 2773\n                months = this._months,                                                                                 // 2774\n                data = this._data,                                                                                     // 2775\n                seconds, minutes, hours, years = 0;                                                                    // 2776\n                                                                                                                       // 2777\n            // The following code bubbles up values, see the tests for                                                 // 2778\n            // examples of what that means.                                                                            // 2779\n            data.milliseconds = milliseconds % 1000;                                                                   // 2780\n                                                                                                                       // 2781\n            seconds = absRound(milliseconds / 1000);                                                                   // 2782\n            data.seconds = seconds % 60;                                                                               // 2783\n                                                                                                                       // 2784\n            minutes = absRound(seconds / 60);                                                                          // 2785\n            data.minutes = minutes % 60;                                                                               // 2786\n                                                                                                                       // 2787\n            hours = absRound(minutes / 60);                                                                            // 2788\n            data.hours = hours % 24;                                                                                   // 2789\n                                                                                                                       // 2790\n            days += absRound(hours / 24);                                                                              // 2791\n                                                                                                                       // 2792\n            // Accurately convert days to years, assume start from year 0.                                             // 2793\n            years = absRound(daysToYears(days));                                                                       // 2794\n            days -= absRound(yearsToDays(years));                                                                      // 2795\n                                                                                                                       // 2796\n            // 30 days to a month                                                                                      // 2797\n            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.                                          // 2798\n            months += absRound(days / 30);                                                                             // 2799\n            days %= 30;                                                                                                // 2800\n                                                                                                                       // 2801\n            // 12 months -> 1 year                                                                                     // 2802\n            years += absRound(months / 12);                                                                            // 2803\n            months %= 12;                                                                                              // 2804\n                                                                                                                       // 2805\n            data.days = days;                                                                                          // 2806\n            data.months = months;                                                                                      // 2807\n            data.years = years;                                                                                        // 2808\n        },                                                                                                             // 2809\n                                                                                                                       // 2810\n        abs : function () {                                                                                            // 2811\n            this._milliseconds = Math.abs(this._milliseconds);                                                         // 2812\n            this._days = Math.abs(this._days);                                                                         // 2813\n            this._months = Math.abs(this._months);                                                                     // 2814\n                                                                                                                       // 2815\n            this._data.milliseconds = Math.abs(this._data.milliseconds);                                               // 2816\n            this._data.seconds = Math.abs(this._data.seconds);                                                         // 2817\n            this._data.minutes = Math.abs(this._data.minutes);                                                         // 2818\n            this._data.hours = Math.abs(this._data.hours);                                                             // 2819\n            this._data.months = Math.abs(this._data.months);                                                           // 2820\n            this._data.years = Math.abs(this._data.years);                                                             // 2821\n                                                                                                                       // 2822\n            return this;                                                                                               // 2823\n        },                                                                                                             // 2824\n                                                                                                                       // 2825\n        weeks : function () {                                                                                          // 2826\n            return absRound(this.days() / 7);                                                                          // 2827\n        },                                                                                                             // 2828\n                                                                                                                       // 2829\n        valueOf : function () {                                                                                        // 2830\n            return this._milliseconds +                                                                                // 2831\n              this._days * 864e5 +                                                                                     // 2832\n              (this._months % 12) * 2592e6 +                                                                           // 2833\n              toInt(this._months / 12) * 31536e6;                                                                      // 2834\n        },                                                                                                             // 2835\n                                                                                                                       // 2836\n        humanize : function (withSuffix) {                                                                             // 2837\n            var output = relativeTime(this, !withSuffix, this.localeData());                                           // 2838\n                                                                                                                       // 2839\n            if (withSuffix) {                                                                                          // 2840\n                output = this.localeData().pastFuture(+this, output);                                                  // 2841\n            }                                                                                                          // 2842\n                                                                                                                       // 2843\n            return this.localeData().postformat(output);                                                               // 2844\n        },                                                                                                             // 2845\n                                                                                                                       // 2846\n        add : function (input, val) {                                                                                  // 2847\n            // supports only 2.0-style add(1, 's') or add(moment)                                                      // 2848\n            var dur = moment.duration(input, val);                                                                     // 2849\n                                                                                                                       // 2850\n            this._milliseconds += dur._milliseconds;                                                                   // 2851\n            this._days += dur._days;                                                                                   // 2852\n            this._months += dur._months;                                                                               // 2853\n                                                                                                                       // 2854\n            this._bubble();                                                                                            // 2855\n                                                                                                                       // 2856\n            return this;                                                                                               // 2857\n        },                                                                                                             // 2858\n                                                                                                                       // 2859\n        subtract : function (input, val) {                                                                             // 2860\n            var dur = moment.duration(input, val);                                                                     // 2861\n                                                                                                                       // 2862\n            this._milliseconds -= dur._milliseconds;                                                                   // 2863\n            this._days -= dur._days;                                                                                   // 2864\n            this._months -= dur._months;                                                                               // 2865\n                                                                                                                       // 2866\n            this._bubble();                                                                                            // 2867\n                                                                                                                       // 2868\n            return this;                                                                                               // 2869\n        },                                                                                                             // 2870\n                                                                                                                       // 2871\n        get : function (units) {                                                                                       // 2872\n            units = normalizeUnits(units);                                                                             // 2873\n            return this[units.toLowerCase() + 's']();                                                                  // 2874\n        },                                                                                                             // 2875\n                                                                                                                       // 2876\n        as : function (units) {                                                                                        // 2877\n            var days, months;                                                                                          // 2878\n            units = normalizeUnits(units);                                                                             // 2879\n                                                                                                                       // 2880\n            if (units === 'month' || units === 'year') {                                                               // 2881\n                days = this._days + this._milliseconds / 864e5;                                                        // 2882\n                months = this._months + daysToYears(days) * 12;                                                        // 2883\n                return units === 'month' ? months : months / 12;                                                       // 2884\n            } else {                                                                                                   // 2885\n                // handle milliseconds separately because of floating point math errors (issue #1867)                  // 2886\n                days = this._days + Math.round(yearsToDays(this._months / 12));                                        // 2887\n                switch (units) {                                                                                       // 2888\n                    case 'week': return days / 7 + this._milliseconds / 6048e5;                                        // 2889\n                    case 'day': return days + this._milliseconds / 864e5;                                              // 2890\n                    case 'hour': return days * 24 + this._milliseconds / 36e5;                                         // 2891\n                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;                                   // 2892\n                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;                             // 2893\n                    // Math.floor prevents floating point math errors here                                             // 2894\n                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;            // 2895\n                    default: throw new Error('Unknown unit ' + units);                                                 // 2896\n                }                                                                                                      // 2897\n            }                                                                                                          // 2898\n        },                                                                                                             // 2899\n                                                                                                                       // 2900\n        lang : moment.fn.lang,                                                                                         // 2901\n        locale : moment.fn.locale,                                                                                     // 2902\n                                                                                                                       // 2903\n        toIsoString : deprecate(                                                                                       // 2904\n            'toIsoString() is deprecated. Please use toISOString() instead ' +                                         // 2905\n            '(notice the capitals)',                                                                                   // 2906\n            function () {                                                                                              // 2907\n                return this.toISOString();                                                                             // 2908\n            }                                                                                                          // 2909\n        ),                                                                                                             // 2910\n                                                                                                                       // 2911\n        toISOString : function () {                                                                                    // 2912\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js            // 2913\n            var years = Math.abs(this.years()),                                                                        // 2914\n                months = Math.abs(this.months()),                                                                      // 2915\n                days = Math.abs(this.days()),                                                                          // 2916\n                hours = Math.abs(this.hours()),                                                                        // 2917\n                minutes = Math.abs(this.minutes()),                                                                    // 2918\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);                                       // 2919\n                                                                                                                       // 2920\n            if (!this.asSeconds()) {                                                                                   // 2921\n                // this is the same as C#'s (Noda) and python (isodate)...                                             // 2922\n                // but not other JS (goog.date)                                                                        // 2923\n                return 'P0D';                                                                                          // 2924\n            }                                                                                                          // 2925\n                                                                                                                       // 2926\n            return (this.asSeconds() < 0 ? '-' : '') +                                                                 // 2927\n                'P' +                                                                                                  // 2928\n                (years ? years + 'Y' : '') +                                                                           // 2929\n                (months ? months + 'M' : '') +                                                                         // 2930\n                (days ? days + 'D' : '') +                                                                             // 2931\n                ((hours || minutes || seconds) ? 'T' : '') +                                                           // 2932\n                (hours ? hours + 'H' : '') +                                                                           // 2933\n                (minutes ? minutes + 'M' : '') +                                                                       // 2934\n                (seconds ? seconds + 'S' : '');                                                                        // 2935\n        },                                                                                                             // 2936\n                                                                                                                       // 2937\n        localeData : function () {                                                                                     // 2938\n            return this._locale;                                                                                       // 2939\n        },                                                                                                             // 2940\n                                                                                                                       // 2941\n        toJSON : function () {                                                                                         // 2942\n            return this.toISOString();                                                                                 // 2943\n        }                                                                                                              // 2944\n    });                                                                                                                // 2945\n                                                                                                                       // 2946\n    moment.duration.fn.toString = moment.duration.fn.toISOString;                                                      // 2947\n                                                                                                                       // 2948\n    function makeDurationGetter(name) {                                                                                // 2949\n        moment.duration.fn[name] = function () {                                                                       // 2950\n            return this._data[name];                                                                                   // 2951\n        };                                                                                                             // 2952\n    }                                                                                                                  // 2953\n                                                                                                                       // 2954\n    for (i in unitMillisecondFactors) {                                                                                // 2955\n        if (hasOwnProp(unitMillisecondFactors, i)) {                                                                   // 2956\n            makeDurationGetter(i.toLowerCase());                                                                       // 2957\n        }                                                                                                              // 2958\n    }                                                                                                                  // 2959\n                                                                                                                       // 2960\n    moment.duration.fn.asMilliseconds = function () {                                                                  // 2961\n        return this.as('ms');                                                                                          // 2962\n    };                                                                                                                 // 2963\n    moment.duration.fn.asSeconds = function () {                                                                       // 2964\n        return this.as('s');                                                                                           // 2965\n    };                                                                                                                 // 2966\n    moment.duration.fn.asMinutes = function () {                                                                       // 2967\n        return this.as('m');                                                                                           // 2968\n    };                                                                                                                 // 2969\n    moment.duration.fn.asHours = function () {                                                                         // 2970\n        return this.as('h');                                                                                           // 2971\n    };                                                                                                                 // 2972\n    moment.duration.fn.asDays = function () {                                                                          // 2973\n        return this.as('d');                                                                                           // 2974\n    };                                                                                                                 // 2975\n    moment.duration.fn.asWeeks = function () {                                                                         // 2976\n        return this.as('weeks');                                                                                       // 2977\n    };                                                                                                                 // 2978\n    moment.duration.fn.asMonths = function () {                                                                        // 2979\n        return this.as('M');                                                                                           // 2980\n    };                                                                                                                 // 2981\n    moment.duration.fn.asYears = function () {                                                                         // 2982\n        return this.as('y');                                                                                           // 2983\n    };                                                                                                                 // 2984\n                                                                                                                       // 2985\n    /************************************                                                                              // 2986\n        Default Locale                                                                                                 // 2987\n    ************************************/                                                                              // 2988\n                                                                                                                       // 2989\n                                                                                                                       // 2990\n    // Set default locale, other locale will inherit from English.                                                     // 2991\n    moment.locale('en', {                                                                                              // 2992\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                          // 2993\n        ordinal : function (number) {                                                                                  // 2994\n            var b = number % 10,                                                                                       // 2995\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 2996\n                (b === 1) ? 'st' :                                                                                     // 2997\n                (b === 2) ? 'nd' :                                                                                     // 2998\n                (b === 3) ? 'rd' : 'th';                                                                               // 2999\n            return number + output;                                                                                    // 3000\n        }                                                                                                              // 3001\n    });                                                                                                                // 3002\n                                                                                                                       // 3003\n    /* EMBED_LOCALES */                                                                                                // 3004\n                                                                                                                       // 3005\n    /************************************                                                                              // 3006\n        Exposing Moment                                                                                                // 3007\n    ************************************/                                                                              // 3008\n                                                                                                                       // 3009\n    function makeGlobal(shouldDeprecate) {                                                                             // 3010\n        /*global ender:false */                                                                                        // 3011\n        if (typeof ender !== 'undefined') {                                                                            // 3012\n            return;                                                                                                    // 3013\n        }                                                                                                              // 3014\n        oldGlobalMoment = globalScope.moment;                                                                          // 3015\n        if (shouldDeprecate) {                                                                                         // 3016\n            globalScope.moment = deprecate(                                                                            // 3017\n                    'Accessing Moment through the global scope is ' +                                                  // 3018\n                    'deprecated, and will be removed in an upcoming ' +                                                // 3019\n                    'release.',                                                                                        // 3020\n                    moment);                                                                                           // 3021\n        } else {                                                                                                       // 3022\n            globalScope.moment = moment;                                                                               // 3023\n        }                                                                                                              // 3024\n    }                                                                                                                  // 3025\n                                                                                                                       // 3026\n    // CommonJS module is defined                                                                                      // 3027\n    if (hasModule) {                                                                                                   // 3028\n        module.exports = moment;                                                                                       // 3029\n    } else if (typeof define === 'function' && define.amd) {                                                           // 3030\n        define(function (require, exports, module) {                                                                   // 3031\n            if (module.config && module.config() && module.config().noGlobal === true) {                               // 3032\n                // release the global variable                                                                         // 3033\n                globalScope.moment = oldGlobalMoment;                                                                  // 3034\n            }                                                                                                          // 3035\n                                                                                                                       // 3036\n            return moment;                                                                                             // 3037\n        });                                                                                                            // 3038\n        makeGlobal(true);                                                                                              // 3039\n    } else {                                                                                                           // 3040\n        makeGlobal();                                                                                                  // 3041\n    }                                                                                                                  // 3042\n}).call(this);                                                                                                         // 3043\n                                                                                                                       // 3044\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/meteor/export.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                  // 2\ndelete this.moment;                                                                                                    // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}