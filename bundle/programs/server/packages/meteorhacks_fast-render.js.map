{"version":3,"sources":["meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/utils.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/namespace.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/utils.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/routes.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/publish_context.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/context.js","meteor://ðŸ’»app/packages/meteorhacks_fast-render/lib/server/iron_router_support.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA,sH;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACzwH;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uwH;;;;;;;;;;;;;;;;;;AClwH","file":"/packages/meteorhacks_fast-render.js","sourcesContent":["AddedToChanged = function(localCopy, added) {\n  added.msg = \"changed\";\n  added.cleared = [];\n  added.fields = added.fields || {};\n\n  _.each(localCopy, function(value, key) {\n    if(key != '_id') {\n      if(typeof added.fields[key] == \"undefined\") {\n        added.cleared.push(key);\n      }\n    }\n  });\n};\n\nApplyDDP = function(existing, message) {\n  var newDoc = (!existing)? {}: _.clone(existing);\n  if(message.msg == 'added') {\n    _.each(message.fields, function(value, key) {\n      newDoc[key] = value;\n    });\n  } else if(message.msg == \"changed\") {\n    _.each(message.fields, function(value, key) {\n      newDoc[key] = value;\n    });\n    _.each(message.cleared, function(key) {\n      delete newDoc[key];\n    });\n  } else if(message.msg == \"removed\") {\n    newDoc = null;\n  }\n\n  return newDoc;\n};\n\n// source: https://gist.github.com/kurtmilam/1868955\n//  modified a bit to not to expose this as an _ api\nDeepExtend = function deepExtend (obj) {\n  var parentRE = /#{\\s*?_\\s*?}/,\n      slice = Array.prototype.slice,\n      hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  _.each(slice.call(arguments, 1), function(source) {\n    for (var prop in source) {\n      if (hasOwnProperty.call(source, prop)) {\n        if (_.isNull(obj[prop]) || _.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n          obj[prop] = source[prop];\n        }\n        else if (_.isString(source[prop]) && parentRE.test(source[prop])) {\n          if (_.isString(obj[prop])) {\n            obj[prop] = source[prop].replace(parentRE, obj[prop]);\n          }\n        }\n        else if (_.isArray(obj[prop]) || _.isArray(source[prop])){\n          if (!_.isArray(obj[prop]) || !_.isArray(source[prop])){\n            throw 'Error: Trying to combine an array with a non-array (' + prop + ')';\n          } else {\n            obj[prop] = _.reject(DeepExtend(obj[prop], source[prop]), function (item) { return _.isNull(item);});\n          }\n        }\n        else if (_.isObject(obj[prop]) || _.isObject(source[prop])){\n          if (!_.isObject(obj[prop]) || !_.isObject(source[prop])){\n            throw 'Error: Trying to combine an object with a non-object (' + prop + ')';\n          } else {\n            obj[prop] = DeepExtend(obj[prop], source[prop]);\n          }\n        } else {\n          obj[prop] = source[prop];\n        }\n      }\n    }\n  });\n  return obj;\n};","FastRender = {\n  _routes: [],\n  _onAllRoutes: []\n};","// meteor algorithm to check if this is a meteor serving http request or not\nIsAppUrl = function (req) {\n  var url = req.url\n  if(url === '/favicon.ico' || url === '/robots.txt') {\n    return false;\n  }\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if(url === '/app.manifest') {\n    return false;\n  }\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if(RoutePolicy.classify(url)) {\n    return false;\n  }\n\n  // we only need to support HTML pages only\n  // this is a check to do it\n  return /html/.test(req.headers['accept']);\n};","var Fiber = Npm.require('fibers');\nFastRender._onAllRoutes = [];\nFastRender.frContext = new Meteor.EnvironmentVariable();\n\nvar fastRenderRoutes = Picker.filter(function(req, res) {\n  return IsAppUrl(req);\n});\nfastRenderRoutes.middleware(Npm.require('connect').cookieParser());\nfastRenderRoutes.middleware(function(req, res, next) {\n  FastRender.handleOnAllRoutes(req, res, next);\n});\n\n// handling specific routes\nFastRender.route = function route(path, callback) {\n  if(path.indexOf('/') !== 0){\n    throw new Error('Error: path (' + path + ') must begin with a leading slash \"/\"')\n  }\n  fastRenderRoutes.route(path, FastRender.handleRoute.bind(null, callback));\n};\n\nfunction setQueryDataCallback(res, next) {\n  return function(queryData) {\n    if(!queryData) return next();\n\n    var existingPayload = InjectData.getData(res, \"fast-render-data\");\n    if(!existingPayload) {\n      InjectData.pushData(res, \"fast-render-data\", queryData);\n    } else {\n      // it's possible to execute this callback twice\n      // the we need to merge exisitng data with the new one\n      _.extend(existingPayload.subscriptions, queryData.subscriptions);\n      _.each(queryData.collectionData, function(data, pubName) {\n        var existingData = existingPayload.collectionData[pubName]\n        if(existingData) {\n          data = existingData.concat(data);\n        }\n\n        existingPayload.collectionData[pubName] = data;\n        InjectData.pushData(res, 'fast-render-data', existingPayload);\n      });\n    }\n    next();\n  };\n}\n\nFastRender.handleRoute = function(processingCallback, params, req, res, next) {\n  var afterProcessed = setQueryDataCallback(res, next);\n  FastRender._processRoutes(params, req, processingCallback, afterProcessed);\n};\n\nFastRender.handleOnAllRoutes = function(req, res, next) {\n  var afterProcessed = setQueryDataCallback(res, next);\n  FastRender._processAllRoutes(req, afterProcessed);\n};\n\nFastRender.onAllRoutes = function onAllRoutes(callback) {\n  FastRender._onAllRoutes.push(callback);\n};\n\nFastRender._processRoutes =\n  function _processRoutes(params, req, routeCallback, callback) {\n  callback = callback || function() {};\n\n  var path = req.url;\n  var loginToken = req.cookies['meteor_login_token'];\n  var headers = req.headers;\n\n  var context = new Context(loginToken, { headers: headers });\n\n  try {\n    FastRender.frContext.withValue(context, function() {\n      routeCallback.call(context, params, path);\n    });\n\n    if(context.stop) {\n      return;\n    }\n\n    callback(context.getData());\n  } catch(err) {\n    handleError(err, path, callback);\n  }\n};\n\nFastRender._processAllRoutes =\n  function _processAllRoutes(req, callback) {\n  callback = callback || function() {};\n\n  var path = req.url;\n  var loginToken = req.cookies['meteor_login_token'];\n  var headers = req.headers;\n\n  new Fiber(function() {\n    var context = new Context(loginToken, { headers: headers });\n\n    try {\n      FastRender._onAllRoutes.forEach(function(callback) {\n        callback.call(context, req.url);\n      });\n\n      callback(context.getData());\n    } catch(err) {\n      handleError(err, path, callback);\n    }\n  }).run();\n};\n\nfunction handleError(err, path, callback) {\n  var message =\n    'error on fast-rendering path: ' +\n    path +\n    \" ; error: \" + err.stack;\n  console.error(message);\n  callback(null);\n}\n\n// adding support for null publications\nFastRender.onAllRoutes(function() {\n  var context = this;\n  var nullHandlers = Meteor.default_server.universal_publish_handlers;\n\n  if(nullHandlers) {\n    nullHandlers.forEach(function(publishHandler) {\n      // console.log(publishHandler.toString());\n      var publishContext = new PublishContext(context, null);\n      var params = [];\n      context.processPublication(publishHandler, publishContext, params);\n\n    });\n  }\n});\n","PublishContext = function PublishContext(context, subscription) {\n  this.userId = context.userId;\n  this.unblock = function() {};\n  this._subscription = subscription;\n  this._context = context;\n  this._collectionData = {};\n  this._onStop = [];\n  this._stopped = false;\n\n  // connection object\n  this.connection = {\n    _id: Meteor.uuid(),\n    close: function() {},\n    onClose: function() {},\n    // fake value, will be supported later on\n    clientAddress: \"127.0.0.1\",\n    httpHeaders: context.headers\n  };\n\n  // we won't be supporting all the other fields of the Meteor's\n  // Subscription class since they are private variables\n};\n\nPublishContext.prototype._addCursor = function(cursor) {\n  var self = this;\n  cursor.rewind();\n  var collectionName = \n    (cursor._cursorDescription)? cursor._cursorDescription.collectionName: null || //for meteor-collections\n    (cursor._collection)? cursor._collection._name: null; //for smart-collections\n\n  this._ensureCollection(collectionName);\n  var cursorData = cursor.fetch();\n  cursorData.forEach(function(doc) {\n    self.added(collectionName, doc._id, doc);\n  });\n};\n\nPublishContext.prototype._ensureCollection = function(collection) {\n  if (!this._collectionData[collection]) {\n    this._collectionData[collection] = [];\n  }\n};\n\nPublishContext.prototype.added = function(collection, id, fields) {\n  this._ensureCollection(collection);\n  var doc = _.clone(fields);\n  doc._id = id;\n  this._collectionData[collection].push(doc);\n};\n\nPublishContext.prototype.changed = function(collection, id, fields) {\n  var collectionData = this._collectionData;\n\n  collectionData[collection] = collectionData[collection].map(function(doc) {\n    if (doc._id === id) {\n      return _.extend(doc, fields);\n    }\n\n    return doc;\n  });\n};\n\nPublishContext.prototype.removed = function(collection, id) {\n  var collectionData = this._collectionData;\n\n  collectionData[collection] = collectionData[collection].filter(function(doc) {\n    return doc._id !== id;\n  });\n};\n\nPublishContext.prototype.onStop = function(cb) {\n  if (this._stopped) {\n    cb();\n  } else {\n    this._onStop.push(cb);\n  }\n};\n\nPublishContext.prototype.ready = function() {\n  this._stopped = true;\n\n  //make the subscription be marked as ready\n  if(this._subscription) {\n    //don't do this for null subscriptions\n    this._context.completeSubscriptions(this._subscription);\n  }\n\n  //make sure that any observe callbacks are cancelled\n  this._onStop.forEach(function(cb) {\n    cb();\n  });\n};\n\nPublishContext.prototype.error = function() {};\nPublishContext.prototype.stop = function() {};","var Fibers = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nContext = function Context(loginToken, otherParams) {\n  this._collectionData = {};\n  this._subscriptions = {};\n  this._loginToken = loginToken;\n  \n  _.extend(this, otherParams);\n\n  // get the user\n  if(Meteor.users) {    \n    // check to make sure, we've the loginToken, \n    // otherwise a random user will fetched from the db\n    if(loginToken) {\n      var hashedToken = loginToken && Accounts._hashLoginToken( loginToken );\n      var query = {'services.resume.loginTokens.hashedToken': hashedToken }; \n      var options = {fields: {_id: 1}};\n      var user = Meteor.users.findOne(query, options);\n    }\n\n    //support for Meteor.user\n    Fibers.current._meteor_dynamics = {};\n    Fibers.current._meteor_dynamics[DDP._CurrentInvocation.slot] = this;\n\n    if(user) {\n      this.userId = user._id;\n    }\n  }\n};\n\nContext.prototype.subscribe = function(subName /*, params */) {\n  var self = this;\n  \n  var publishHandler = Meteor.default_server.publish_handlers[subName];\n  if(publishHandler) {\n    var params = Array.prototype.slice.call(arguments, 1);\n    var subscription = {name: subName, params: params}\n    var publishContext = new PublishContext(this, subscription);\n\n    return this.processPublication(publishHandler, publishContext, params);\n  } else {\n    console.warn('There is no such publish handler named:', subName);\n    return {};\n  }\n};\n\nContext.prototype.processPublication = function(publishHandler, publishContext, params) {\n  var self = this;\n  var data = {};\n  var ensureCollection = function(collectionName) {\n    self._ensureCollection(collectionName);\n    if(!data[collectionName]) {\n      data[collectionName] = [];\n    }\n  };\n\n  var future = new Future();\n  //detect when the context is ready to be sent to the client\n  publishContext.onStop(function() {\n    if(!future.isResolved()) {\n      future.return();\n    }\n  });\n\n  try {\n    var cursors = publishHandler.apply(publishContext, params);\n  } catch(ex) {\n    console.warn('error caught on publication: ', publishContext._subscription, ': ', ex.message);\n    // since, this subscription caught on an error we can't proceed.\n    // but we can't also throws an error since other publications might have something useful\n    // So, it's not fair to ignore running them due to error of this sub\n    // this might also be failed due to the use of some private API's of Meteor's Susbscription class\n    publishContext.ready();\n  }\n\n  if(cursors) {\n    //the publish function returned a cursor\n    if(cursors.constructor != Array) {\n      cursors = [cursors];\n    }\n\n    //add collection data\n    cursors.forEach(function(cursor) {\n      publishContext._addCursor(cursor);\n    });\n\n    //the subscription is ready\n    publishContext.ready();\n  } else if(cursors === null) {\n    //some developers send null to indicate they are not using the publication\n    //this is not the way to go, but meteor's accounts-base also does this\n    //so we need some special handling on this\n    publishContext.ready();\n  }\n\n  if (!future.isResolved()) {\n    //don't wait forever for handler to fire ready()\n    Meteor.setTimeout(function() {\n      if (!future.isResolved()) {\n        //publish handler failed to send ready signal in time\n        console.warn('Publish handler for', publishContext._subscription, 'sent no ready signal');\n        future.return();\n      }\n    }, 500);  //arbitrarially set timeout to 500ms, should probably be configurable\n\n    // wait for the subscription became ready.\n    future.wait();\n  }\n\n  // get the data\n  _.each(publishContext._collectionData, function(collData, collectionName) {\n    ensureCollection(collectionName);\n    data[collectionName].push(collData);\n    \n    // copy the collection data in publish context into the FR context\n    self._ensureCollection(collectionName);\n    self._collectionData[collectionName].push(collData);\n  });\n\n  return data;\n};\n\nContext.prototype.completeSubscriptions = function(subscription) {\n  var subs = this._subscriptions[subscription.name];\n  if(!subs) {\n    subs = this._subscriptions[subscription.name] = {};\n  }\n\n  subs[EJSON.stringify(subscription.params)] = true;\n};\n\nContext.prototype._ensureCollection = function(collectionName) {\n  if(!this._collectionData[collectionName]) {\n    this._collectionData[collectionName] = [];\n  }\n};\n\nContext.prototype.getData = function() {\n  return {\n    collectionData: this._collectionData,\n    subscriptions: this._subscriptions,\n    loginToken: this._loginToken\n  };\n};\n\nFastRender._Context = Context;","if(!Package['iron:router']) return;\n\nvar RouteController = Package['iron:router'].RouteController;\nvar Router = Package['iron:router'].Router;\n\nvar currentSubscriptions = [];\nMeteor.subscribe = function(subscription) {\n  currentSubscriptions.push(arguments);\n};\n\n//assuming, no runtime routes will be added\nMeteor.startup(function() {\n  // this is trick to run the processRoutes at the \n  // end of all Meteor.startup callbacks\n  Meteor.startup(processRoutes);\n});\n\nfunction processRoutes() {\n  Router.routes.forEach(function(route) {\n    route.options = route.options || {};\n    if(route.options.fastRender) {\n      handleRoute(route);\n    } else if(\n        getController(route) && \n        getController(route).prototype && \n        getController(route).prototype.fastRender\n    ) {\n      handleRoute(route);\n    }\n  });\n\n  // getting global waitOns\n  var globalWaitOns = [];\n  if(Router._globalHooks && Router._globalHooks.waitOn && Router._globalHooks.waitOn.length > 0) {\n    Router._globalHooks.waitOn.forEach(function(waitOn) {\n      globalWaitOns.push(waitOn.hook);\n    });\n  }\n  \n  FastRender.onAllRoutes(function(path) {\n    var self = this;\n    \n    currentSubscriptions = [];\n    globalWaitOns.forEach(function(waitOn) {\n      waitOn.call({path: path});\n    });\n    \n    currentSubscriptions.forEach(function(args) {\n      self.subscribe.apply(self, args);\n    });\n  });\n};\n\nfunction handleRoute(route) {\n  var subscriptionFunctions = [];\n  \n  // get potential subscription handlers from the route options\n  ['waitOn', 'subscriptions'].forEach(function(funcName) {\n    var handler = route.options[funcName];\n    if(typeof handler == 'function') {\n      subscriptionFunctions.push(handler);\n    } else if (handler instanceof Array) {\n      handler.forEach(function(func) {\n        if(typeof func == 'function') {\n          subscriptionFunctions.push(func);\n        }\n      });\n    }\n  });\n\n  FastRender.route(getPath(route), onRoute);\n\n  function onRoute(params, path) {\n    var self = this;\n    var context = {\n      params: params,\n      path: path\n    };\n\n    //reset subscriptions;\n    currentSubscriptions = [];\n    subscriptionFunctions.forEach(function(func) {\n      func.call(context);\n    });\n\n    // if there is a controller, try to initiate it and invoke potential \n    // methods which could give us subscriptions\n    var controller = getController(route);\n    if(controller && controller.prototype) {\n      if(typeof controller.prototype.lookupOption == 'function') {\n        // for IR 1.0\n        // it is possible to create a controller invoke methods on it\n        var controllerInstance = new controller();\n        controllerInstance.params = params;\n        controllerInstance.path = path;\n\n        ['waitOn', 'subscriptions'].forEach(function(funcName) {\n          if(controllerInstance[funcName]) {\n            controllerInstance[funcName].call(controllerInstance);\n          }\n        });\n      } else {\n        // IR 0.9\n        // hard to create a controller instance\n        // so this is the option we can take\n        var waitOn = controller.prototype.waitOn;\n        if(waitOn) {\n          waitOn.call(context);\n        }\n      }\n    }\n\n    currentSubscriptions.forEach(function(args) {\n      self.subscribe.apply(self, args);\n    });\n  }\n}\n\nfunction getPath(route) {\n  if(route._path) {\n    // for IR 1.0\n    return route._path;\n  } else {\n    // for IR 0.9\n    var name = (route.name == \"/\")? \"\" : name;\n    return route.options.path || (\"/\" + name);\n  }\n}\n\nfunction getController(route) {\n  if(route.findControllerConstructor) {\n    // for IR 1.0\n    return route.findControllerConstructor();\n  } else if(route.findController) {\n    // for IR 0.9\n    return route.findController();\n  } else {\n    // unsupported version of IR\n    return null;\n  }\n}"]}